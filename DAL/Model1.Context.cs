//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SHIPPING_FinalEntities : DbContext
    {
        public SHIPPING_FinalEntities()
            : base("name=SHIPPING_FinalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<JCargoDescription> JCargoDescriptions { get; set; }
        public DbSet<RecPay> RecPays { get; set; }
        public DbSet<JAuditLog> JAuditLogs { get; set; }
        public DbSet<JBIllOfEntry> JBIllOfEntries { get; set; }
        public DbSet<JContainerDetail> JContainerDetails { get; set; }
        public DbSet<Carrier> Carriers { get; set; }
        public DbSet<CountryMaster> CountryMasters { get; set; }
        public DbSet<CUSTOMER> CUSTOMERs { get; set; }
        public DbSet<Department> Departments { get; set; }
        public DbSet<Designation> Designations { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<JobMode> JobModes { get; set; }
        public DbSet<JobType> JobTypes { get; set; }
        public DbSet<Location> Locations { get; set; }
        public DbSet<RevenueType> RevenueTypes { get; set; }
        public DbSet<ShippingAgent> ShippingAgents { get; set; }
        public DbSet<Transporter> Transporters { get; set; }
        public DbSet<Vessel> Vessels { get; set; }
        public DbSet<Voyage> Voyages { get; set; }
        public DbSet<UserProfile> UserProfiles { get; set; }
        public DbSet<AspNetRole> AspNetRoles { get; set; }
        public DbSet<RoleMaster> RoleMasters { get; set; }
        public DbSet<CurrencyMaster> CurrencyMasters { get; set; }
        public DbSet<MenuAccessLevel> MenuAccessLevels { get; set; }
        public DbSet<ContainerType> ContainerTypes { get; set; }
        public DbSet<Supplier> Suppliers { get; set; }
        public DbSet<Port> Ports { get; set; }
        public DbSet<AcCompany> AcCompanies { get; set; }
        public DbSet<AcGroup> AcGroups { get; set; }
        public DbSet<AcHead> AcHeads { get; set; }
        public DbSet<AcHeadAssign> AcHeadAssigns { get; set; }
        public DbSet<Menu> Menus { get; set; }
        public DbSet<BranchMaster> BranchMasters { get; set; }
        public DbSet<AcCategory> AcCategories { get; set; }
        public DbSet<AnalysisGroup> AnalysisGroups { get; set; }
        public DbSet<AnalysisHead> AnalysisHeads { get; set; }
        public DbSet<AcAnalysisHeadAllocation> AcAnalysisHeadAllocations { get; set; }
        public DbSet<AcOpeningMaster> AcOpeningMasters { get; set; }
        public DbSet<AcMemoBankDetail> AcMemoBankDetails { get; set; }
        public DbSet<AcMemoJournalDetail> AcMemoJournalDetails { get; set; }
        public DbSet<AcMemoJournalMaster> AcMemoJournalMasters { get; set; }
        public DbSet<UserRegistration> UserRegistrations { get; set; }
        public DbSet<Airline> Airlines { get; set; }
        public DbSet<Commodity> Commodities { get; set; }
        public DbSet<ItemUnit> ItemUnits { get; set; }
        public DbSet<PaymentTerm> PaymentTerms { get; set; }
        public DbSet<Remark> Remarks { get; set; }
        public DbSet<Validity> Validities { get; set; }
        public DbSet<AcOPInvoiceDetail> AcOPInvoiceDetails { get; set; }
        public DbSet<AcOPInvoiceMaster> AcOPInvoiceMasters { get; set; }
        public DbSet<qrySupplierOutstanding> qrySupplierOutstandings { get; set; }
        public DbSet<qryCustomerStatement> qryCustomerStatements { get; set; }
        public DbSet<AcFinancialYear> AcFinancialYears { get; set; }
        public DbSet<DebitNote> DebitNotes { get; set; }
        public DbSet<AcJournalDetail> AcJournalDetails { get; set; }
        public DbSet<AcJournalMaster> AcJournalMasters { get; set; }
        public DbSet<CostUpdationDetail> CostUpdationDetails { get; set; }
        public DbSet<JInvoice> JInvoices { get; set; }
        public DbSet<JobGeneration> JobGenerations { get; set; }
        public DbSet<RecPayDetail> RecPayDetails { get; set; }
        public DbSet<CreditNote> CreditNotes { get; set; }
        public DbSet<CostUpdation> CostUpdations { get; set; }
        public DbSet<AcBankDetail> AcBankDetails { get; set; }
        public DbSet<PurchaseInvoice> PurchaseInvoices { get; set; }
        public DbSet<SalesInvoice> SalesInvoices { get; set; }
        public DbSet<PurchaseInvoiceDetail> PurchaseInvoiceDetails { get; set; }
        public DbSet<SalesInvoiceDetail> SalesInvoiceDetails { get; set; }
        public DbSet<ProductService> ProductServices { get; set; }
        public DbSet<SupplierTypeMaster> SupplierTypeMasters { get; set; }
        public DbSet<AcHeadControl> AcHeadControls { get; set; }
        public DbSet<PageControlMaster> PageControlMasters { get; set; }
        public DbSet<PageControlField> PageControlFields { get; set; }
        public DbSet<JobStatu> JobStatus { get; set; }
        public DbSet<StaffNote> StaffNotes { get; set; }
        public DbSet<JStatu> JStatus { get; set; }
        public DbSet<AcType> AcTypes { get; set; }
        public DbSet<CustomerNotification> CustomerNotifications { get; set; }
        public virtual int SP_DeleteUser(Nullable<int> uSerID)
        {
            var uSerIDParameter = uSerID.HasValue ?
                new ObjectParameter("USerID", uSerID) :
                new ObjectParameter("USerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteUser", uSerIDParameter);
        }
    
        public virtual int SP_EditUserDetails(Nullable<int> usserID, string userName, string password)
        {
            var usserIDParameter = usserID.HasValue ?
                new ObjectParameter("UsserID", usserID) :
                new ObjectParameter("UsserID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EditUserDetails", usserIDParameter, userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<SP_GetUserDetailForEdit_Result> SP_GetUserDetailForEdit(Nullable<int> uSerID)
        {
            var uSerIDParameter = uSerID.HasValue ?
                new ObjectParameter("USerID", uSerID) :
                new ObjectParameter("USerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUserDetailForEdit_Result>("SP_GetUserDetailForEdit", uSerIDParameter);
        }
    
        public virtual ObjectResult<SP_GetUserDetails_Result> SP_GetUserDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUserDetails_Result>("SP_GetUserDetails");
        }
    
        public virtual int SP_InsertUserDetails(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUserDetails", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<SP_LoginUser_Result> SP_LoginUser(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_LoginUser_Result>("SP_LoginUser", userNameParameter, passwordParameter);
        }
    
        public virtual int GetAllJobType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllJobType");
        }
    
        public virtual ObjectResult<SP_GetAllJobType_Result> SP_GetAllJobType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllJobType_Result>("SP_GetAllJobType");
        }
    
        public virtual ObjectResult<SP_GetAllCustomers_Result> SP_GetAllCustomers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllCustomers_Result>("SP_GetAllCustomers");
        }
    
        public virtual ObjectResult<SP_GetAllPorts_Result> SP_GetAllPorts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllPorts_Result>("SP_GetAllPorts");
        }
    
        public virtual ObjectResult<SP_GetAllCarrier_Result> SP_GetAllCarrier()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllCarrier_Result>("SP_GetAllCarrier");
        }
    
        public virtual ObjectResult<SP_GetAllCountries_Result> SP_GetAllCountries()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllCountries_Result>("SP_GetAllCountries");
        }
    
        public virtual ObjectResult<SP_GetAllEmployees_Result> SP_GetAllEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllEmployees_Result>("SP_GetAllEmployees");
        }
    
        public virtual ObjectResult<SP_GetAllTransporters_Result> SP_GetAllTransporters()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllTransporters_Result>("SP_GetAllTransporters");
        }
    
        public virtual ObjectResult<SP_GetAllVessels_Result> SP_GetAllVessels()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllVessels_Result>("SP_GetAllVessels");
        }
    
        public virtual int SP_InsertCargoDescription(Nullable<int> CargoDescriptionID,Nullable<int> jobID, string mark, string description, Nullable<decimal> weight, Nullable<decimal> volume, Nullable<decimal> packages, Nullable<decimal> grossWeight, string userID)
        {
            var CargoDescriptionIDParameter = CargoDescriptionID.HasValue ?
               new ObjectParameter("CargoDescriptionID", CargoDescriptionID) :
               new ObjectParameter("CargoDescriptionID", typeof(int));

            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            var markParameter = mark != null ?
                new ObjectParameter("Mark", mark) :
                new ObjectParameter("Mark", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(decimal));
    
            var volumeParameter = volume.HasValue ?
                new ObjectParameter("volume", volume) :
                new ObjectParameter("volume", typeof(decimal));
    
            var packagesParameter = packages.HasValue ?
                new ObjectParameter("Packages", packages) :
                new ObjectParameter("Packages", typeof(decimal));
    
            var grossWeightParameter = grossWeight.HasValue ?
                new ObjectParameter("GrossWeight", grossWeight) :
                new ObjectParameter("GrossWeight", typeof(decimal));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertCargoDescription", CargoDescriptionIDParameter, jobIDParameter, markParameter, descriptionParameter, weightParameter, volumeParameter, packagesParameter, grossWeightParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_GetAllContainerTypes_Result> SP_GetAllContainerTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllContainerTypes_Result>("SP_GetAllContainerTypes");
        }
    
        public virtual int SP_InsertAuditlog(Nullable<int> JAuditLogID,Nullable<System.DateTime> transDate, string remarks, Nullable<int> jobID, Nullable<int> userID)
        {
           
                var JAuditLogIDParameter = JAuditLogID.HasValue ?
                new ObjectParameter("JAuditLogID", JAuditLogID) :
                new ObjectParameter("JAuditLogID", typeof(System.Int32));

            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertAuditlog", JAuditLogIDParameter, transDateParameter, remarksParameter, jobIDParameter, userIDParameter);
        }
    
        public virtual int SP_InsertBillOfEntry(Nullable<int> BIllOfEntryID,string bIllOfEntry, Nullable<int> jobID, Nullable<System.DateTime> billofEntryDate, Nullable<int> shippingAgentID, Nullable<int> userID)
        {
            var BIllOfEntryIDParameter = BIllOfEntryID.HasValue ?
               new ObjectParameter("BIllOfEntryID", BIllOfEntryID) :
               new ObjectParameter("BIllOfEntryID", typeof(int));

            var bIllOfEntryParameter = bIllOfEntry != null ?
                new ObjectParameter("BIllOfEntry", bIllOfEntry) :
                new ObjectParameter("BIllOfEntry", typeof(string));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            var billofEntryDateParameter = billofEntryDate.HasValue ?
                new ObjectParameter("BillofEntryDate", billofEntryDate) :
                new ObjectParameter("BillofEntryDate", typeof(System.DateTime));
    
            var shippingAgentIDParameter = shippingAgentID.HasValue ?
                new ObjectParameter("ShippingAgentID", shippingAgentID) :
                new ObjectParameter("ShippingAgentID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertBillOfEntry", BIllOfEntryIDParameter,bIllOfEntryParameter, jobIDParameter, billofEntryDateParameter, shippingAgentIDParameter, userIDParameter);
        }
    
        public virtual int SP_InsertContainerDetails(Nullable<int> JContainerDetailID,Nullable<int> jobID, Nullable<int> containerTypeID, string containerNo, string sealNo, string description, Nullable<int> userID)
        {
            var JContainerDetailIDParameter = JContainerDetailID.HasValue ?
               new ObjectParameter("JContainerDetailID", JContainerDetailID) :
               new ObjectParameter("JContainerDetailID", typeof(int));

            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            var containerTypeIDParameter = containerTypeID.HasValue ?
                new ObjectParameter("ContainerTypeID", containerTypeID) :
                new ObjectParameter("ContainerTypeID", typeof(int));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            var sealNoParameter = sealNo != null ?
                new ObjectParameter("SealNo", sealNo) :
                new ObjectParameter("SealNo", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertContainerDetails", JContainerDetailIDParameter, jobIDParameter, containerTypeIDParameter, containerNoParameter, sealNoParameter, descriptionParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_GetAllRecieptsDetails_Result> SP_GetAllRecieptsDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllRecieptsDetails_Result>("SP_GetAllRecieptsDetails");
        }
    
        public virtual ObjectResult<SP_GetAllJobsDetails_Result> SP_GetAllJobsDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllJobsDetails_Result>("SP_GetAllJobsDetails");
        }
    
        public virtual ObjectResult<string> SP_GetMaxRVID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetMaxRVID");
        }
    
        public virtual ObjectResult<SP_GetCurrency_Result> SP_GetCurrency()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCurrency_Result>("SP_GetCurrency");
        }
    
        public virtual int SP_InsertRecPay(Nullable<System.DateTime> recPayDate, string documentNo, Nullable<int> customerID, Nullable<int> supplierID, Nullable<int> businessCentreID, string bankName, string chequeNo, Nullable<System.DateTime> chequeDate, string remarks, Nullable<int> acJournalID, Nullable<bool> statusRec, string statusEntry, string statusOrigin, Nullable<int> fYearID, Nullable<int> acCompanyID, Nullable<decimal> eXRate, Nullable<decimal> fMoney, Nullable<int> userID)
        {
            var recPayDateParameter = recPayDate.HasValue ?
                new ObjectParameter("RecPayDate", recPayDate) :
                new ObjectParameter("RecPayDate", typeof(System.DateTime));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var businessCentreIDParameter = businessCentreID.HasValue ?
                new ObjectParameter("BusinessCentreID", businessCentreID) :
                new ObjectParameter("BusinessCentreID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            var statusRecParameter = statusRec.HasValue ?
                new ObjectParameter("StatusRec", statusRec) :
                new ObjectParameter("StatusRec", typeof(bool));
    
            var statusEntryParameter = statusEntry != null ?
                new ObjectParameter("StatusEntry", statusEntry) :
                new ObjectParameter("StatusEntry", typeof(string));
    
            var statusOriginParameter = statusOrigin != null ?
                new ObjectParameter("StatusOrigin", statusOrigin) :
                new ObjectParameter("StatusOrigin", typeof(string));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var eXRateParameter = eXRate.HasValue ?
                new ObjectParameter("EXRate", eXRate) :
                new ObjectParameter("EXRate", typeof(decimal));
    
            var fMoneyParameter = fMoney.HasValue ?
                new ObjectParameter("FMoney", fMoney) :
                new ObjectParameter("FMoney", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertRecPay", recPayDateParameter, documentNoParameter, customerIDParameter, supplierIDParameter, businessCentreIDParameter, bankNameParameter, chequeNoParameter, chequeDateParameter, remarksParameter, acJournalIDParameter, statusRecParameter, statusEntryParameter, statusOriginParameter, fYearIDParameter, acCompanyIDParameter, eXRateParameter, fMoneyParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_GetAdvanceAmountOfCustomer(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_GetAdvanceAmountOfCustomer", customerIDParameter);
        }
    
        public virtual ObjectResult<string> SP_GetMaxPVID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetMaxPVID");
        }
    
        public virtual ObjectResult<SP_GetAllSupplier_Result> SP_GetAllSupplier()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllSupplier_Result>("SP_GetAllSupplier");
        }
    
        public virtual ObjectResult<SP_GetJobCodesForCostUpdation_Result> SP_GetJobCodesForCostUpdation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetJobCodesForCostUpdation_Result>("SP_GetJobCodesForCostUpdation");
        }
    
        public virtual ObjectResult<string> SP_GetMaxCostUpdationDocNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetMaxCostUpdationDocNo");
        }
    
        public virtual ObjectResult<SP_GetAllSupplierByJobCode_Result> SP_GetAllSupplierByJobCode(string jobCode)
        {
            var jobCodeParameter = jobCode != null ?
                new ObjectParameter("JobCode", jobCode) :
                new ObjectParameter("JobCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllSupplierByJobCode_Result>("SP_GetAllSupplierByJobCode", jobCodeParameter);
        }
    
        public virtual ObjectResult<SP_GetCustomerRecieptByRecPayID_Result> SP_GetCustomerRecieptByRecPayID(Nullable<int> recPayID)
        {
            var recPayIDParameter = recPayID.HasValue ?
                new ObjectParameter("RecPayID", recPayID) :
                new ObjectParameter("RecPayID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCustomerRecieptByRecPayID_Result>("SP_GetCustomerRecieptByRecPayID", recPayIDParameter);
        }
    
        public virtual ObjectResult<SP_GetDeliveryNoteReport_Result> SP_GetDeliveryNoteReport(Nullable<int> jobID)
        {
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDeliveryNoteReport_Result>("SP_GetDeliveryNoteReport", jobIDParameter);
        }
    
        public virtual ObjectResult<SP_GetJobArrivalReport_Result> SP_GetJobArrivalReport(Nullable<int> jobID)
        {
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetJobArrivalReport_Result>("SP_GetJobArrivalReport", jobIDParameter);
        }
    
        public virtual ObjectResult<SP_GetSupplierPaymentByRecPayID_Result> SP_GetSupplierPaymentByRecPayID(Nullable<int> recPayID)
        {
            var recPayIDParameter = recPayID.HasValue ?
                new ObjectParameter("RecPayID", recPayID) :
                new ObjectParameter("RecPayID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSupplierPaymentByRecPayID_Result>("SP_GetSupplierPaymentByRecPayID", recPayIDParameter);
        }
    
        public virtual ObjectResult<SP_GetAllRevenueType_Result> SP_GetAllRevenueType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllRevenueType_Result>("SP_GetAllRevenueType");
        }

        public virtual ObjectResult<Nullable<int>> SP_GetMaxRecPayID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_GetMaxRecPayID");
        }
    
        public virtual ObjectResult<string> SP_GetJobTypePrefix(Nullable<int> jobTypeID)
        {
            var jobTypeIDParameter = jobTypeID.HasValue ?
                new ObjectParameter("JobTypeID", jobTypeID) :
                new ObjectParameter("JobTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetJobTypePrefix", jobTypeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_GetMaxJobID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_GetMaxJobID");
        }
    
        public virtual ObjectResult<SP_GetSupplierByRevenueTypeID_Result> SP_GetSupplierByRevenueTypeID(Nullable<int> revenuTypeId)
        {
            var revenuTypeIdParameter = revenuTypeId.HasValue ?
                new ObjectParameter("RevenuTypeId", revenuTypeId) :
                new ObjectParameter("RevenuTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSupplierByRevenueTypeID_Result>("SP_GetSupplierByRevenueTypeID", revenuTypeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_GetCurrencyExchangeRate(Nullable<int> currencyId)
        {
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_GetCurrencyExchangeRate", currencyIdParameter);
        }
    
        public virtual ObjectResult<SP_GetShippingAgents_Result> SP_GetShippingAgents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetShippingAgents_Result>("SP_GetShippingAgents");
        }
    
        public virtual ObjectResult<SP_GetCargoDecbyJobIDandUser_Result> SP_GetCargoDecbyJobIDandUser(Nullable<int> jobId, Nullable<int> userID)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCargoDecbyJobIDandUser_Result>("SP_GetCargoDecbyJobIDandUser", jobIdParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_GetContainerDecbyJobIDandUser_Result> SP_GetContainerDecbyJobIDandUser(Nullable<int> jobId, Nullable<int> userID)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetContainerDecbyJobIDandUser_Result>("SP_GetContainerDecbyJobIDandUser", jobIdParameter, userIDParameter);
        }
    
        public virtual int SP_DeleteContainerbyJobIDandUser(Nullable<int> jContainerDetailID)
        {
            var jContainerDetailIDParameter = jContainerDetailID.HasValue ?
                new ObjectParameter("JContainerDetailID", jContainerDetailID) :
                new ObjectParameter("JContainerDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteContainerbyJobIDandUser", jContainerDetailIDParameter);
        }

        public virtual int SP_DeleteJobDetailsByJobID(Nullable<int> JobID,string InvoiceIds, string DeletedCargoIds, string DeletedContainerIds, string DeletedBillOfEntryIds, string DeletedAuditLogIDs)
        {
            var jobIDParameter = JobID.HasValue ?
                 new ObjectParameter("JobID", JobID) :
                 new ObjectParameter("JobID", typeof(int));

            var invoiceIdsParameter = InvoiceIds != null ?
                new ObjectParameter("InvoiceIds", InvoiceIds) :
                new ObjectParameter("InvoiceIds", typeof(string));

            var DeletedCargoIdsParameter = DeletedCargoIds != null ?
               new ObjectParameter("DeletedCargoIds", DeletedCargoIds) :
               new ObjectParameter("DeletedCargoIds", typeof(string));

            var DeletedContainerIdsParameter = DeletedContainerIds != null ?
              new ObjectParameter("DeletedContainerIds", DeletedContainerIds) :
              new ObjectParameter("DeletedContainerIds", typeof(string));

            var DeletedBillOfEntryIdsParameter = DeletedBillOfEntryIds != null ?
            new ObjectParameter("DeletedBillOfEntryIds", DeletedBillOfEntryIds) :
            new ObjectParameter("DeletedBillOfEntryIds", typeof(string));

            var DeletedAuditLogIDsParameter = DeletedAuditLogIDs != null ?
          new ObjectParameter("DeletedAuditLogIDs", DeletedAuditLogIDs) :
          new ObjectParameter("DeletedAuditLogIDs", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteJobDetailsByJobID", jobIDParameter, invoiceIdsParameter, DeletedCargoIdsParameter, DeletedContainerIdsParameter, DeletedBillOfEntryIdsParameter, DeletedAuditLogIDsParameter);
        }
        

        public virtual ObjectResult<SP_GetAuditbyJobIDandUser_Result> SP_GetAuditbyJobIDandUser(Nullable<int> jobId, Nullable<int> userID)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAuditbyJobIDandUser_Result>("SP_GetAuditbyJobIDandUser", jobIdParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_GetBillsbyJobIDandUser_Result> SP_GetBillsbyJobIDandUser(Nullable<int> jobId, Nullable<int> userID)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetBillsbyJobIDandUser_Result>("SP_GetBillsbyJobIDandUser", jobIdParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_GetMaxInvoiceNumber()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_GetMaxInvoiceNumber");
        }
    
        public virtual int SP_InsertCostUpdationAndDetails(Nullable<int> supplierID, Nullable<int> jobID, string invoice, Nullable<System.DateTime> invoiceDate, Nullable<int> employeeID, string documentNo, string supplierPaymentStatus, Nullable<int> userID, string supplierReference, Nullable<decimal> amountPaidTillDate)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            var invoiceParameter = invoice != null ?
                new ObjectParameter("Invoice", invoice) :
                new ObjectParameter("Invoice", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var supplierPaymentStatusParameter = supplierPaymentStatus != null ?
                new ObjectParameter("SupplierPaymentStatus", supplierPaymentStatus) :
                new ObjectParameter("SupplierPaymentStatus", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var supplierReferenceParameter = supplierReference != null ?
                new ObjectParameter("SupplierReference", supplierReference) :
                new ObjectParameter("SupplierReference", typeof(string));
    
            var amountPaidTillDateParameter = amountPaidTillDate.HasValue ?
                new ObjectParameter("AmountPaidTillDate", amountPaidTillDate) :
                new ObjectParameter("AmountPaidTillDate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertCostUpdationAndDetails", supplierIDParameter, jobIDParameter, invoiceParameter, invoiceDateParameter, employeeIDParameter, documentNoParameter, supplierPaymentStatusParameter, userIDParameter, supplierReferenceParameter, amountPaidTillDateParameter);
        }
    
        public virtual int SP_DeleteJobByJobID(Nullable<int> jobID)
        {
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteJobByJobID", jobIDParameter);
        }
    
        public virtual ObjectResult<SP_GetAllPaymentsDetails_Result> SP_GetAllPaymentsDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllPaymentsDetails_Result>("SP_GetAllPaymentsDetails");
        }
    
        public virtual int SP_DeleteBillbyID(Nullable<int> bIllOfEntryIDID)
        {
            var bIllOfEntryIDIDParameter = bIllOfEntryIDID.HasValue ?
                new ObjectParameter("BIllOfEntryIDID", bIllOfEntryIDID) :
                new ObjectParameter("BIllOfEntryIDID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteBillbyID", bIllOfEntryIDIDParameter);
        }
    
        public virtual int SP_DeleteJAuditLogbyID(Nullable<int> jAuditLogID)
        {
            var jAuditLogIDParameter = jAuditLogID.HasValue ?
                new ObjectParameter("JAuditLogID", jAuditLogID) :
                new ObjectParameter("JAuditLogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteJAuditLogbyID", jAuditLogIDParameter);
        }
    
        public virtual int SP_DeleteJCargoDescriptionbyID(Nullable<int> cargoDescriptionID)
        {
            var cargoDescriptionIDParameter = cargoDescriptionID.HasValue ?
                new ObjectParameter("CargoDescriptionID", cargoDescriptionID) :
                new ObjectParameter("CargoDescriptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteJCargoDescriptionbyID", cargoDescriptionIDParameter);
        }
    
        public virtual int SP_DeleteJInvoicebyID(Nullable<int> invoiceID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteJInvoicebyID", invoiceIDParameter);
        }
    
        public virtual ObjectResult<SP_GetExchageRateByCurrencyID_Result> SP_GetExchageRateByCurrencyID(Nullable<int> currencyID)
        {
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetExchageRateByCurrencyID_Result>("SP_GetExchageRateByCurrencyID", currencyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_GetInvoiceNumberByJobID(Nullable<int> jobID)
        {
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_GetInvoiceNumberByJobID", jobIDParameter);
        }
    
        public virtual int SP_UpdateCostUpdatonStatus(Nullable<int> costUpdationID)
        {
            var costUpdationIDParameter = costUpdationID.HasValue ?
                new ObjectParameter("CostUpdationID", costUpdationID) :
                new ObjectParameter("CostUpdationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateCostUpdatonStatus", costUpdationIDParameter);
        }
    
        public virtual ObjectResult<SP_GetJInvoiceDetailsByInvoiceID_Result> SP_GetJInvoiceDetailsByInvoiceID(Nullable<int> invoiceID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetJInvoiceDetailsByInvoiceID_Result>("SP_GetJInvoiceDetailsByInvoiceID", invoiceIDParameter);
        }
    
        public virtual int SP_DeleteCostUpdationDetails(Nullable<int> costUpdationID)
        {
            var costUpdationIDParameter = costUpdationID.HasValue ?
                new ObjectParameter("CostUpdationID", costUpdationID) :
                new ObjectParameter("CostUpdationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteCostUpdationDetails", costUpdationIDParameter);
        }
    
        public virtual int SP_DeleteCustomerReciepts(Nullable<int> recPayID)
        {
            var recPayIDParameter = recPayID.HasValue ?
                new ObjectParameter("RecPayID", recPayID) :
                new ObjectParameter("RecPayID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteCustomerReciepts", recPayIDParameter);
        }
    
        public virtual int SP_DeleteSupplierPayment(Nullable<int> recPayID)
        {
            var recPayIDParameter = recPayID.HasValue ?
                new ObjectParameter("RecPayID", recPayID) :
                new ObjectParameter("RecPayID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteSupplierPayment", recPayIDParameter);
        }
    
        public virtual ObjectResult<SP_CustomerLedgerReport_Result> SP_GetCustomerLedgerReport(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CustomerLedgerReport_Result>("SP_GetCustomerLedgerReport", customerIDParameter);
        }
    
        public virtual ObjectResult<SP_GetCustomerByID_Result> SP_GetCustomerByID(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCustomerByID_Result>("SP_GetCustomerByID", customerIDParameter);
        }
    
        public virtual int SP_UpdateJob(string jobCode, Nullable<int> jobTypeID, Nullable<System.DateTime> jobDate, Nullable<int> consignerID, Nullable<int> consigneeID, Nullable<int> invoiceToID, Nullable<int> employeeID, Nullable<int> shipperID, string iPTNo, string refNo, string billOfEnquiry, Nullable<System.DateTime> bLDate, string deliveryOrderNo, string bLStatus1, string cLFValue, Nullable<decimal> depositAmount, Nullable<System.DateTime> depositDate, string receiptNo, Nullable<System.DateTime> refundDate, Nullable<decimal> refundAmount, Nullable<int> vesselID, string voyageNo, string freight, Nullable<System.DateTime> sailingDate, Nullable<System.DateTime> arrivalDate, string mBL, string hBL, Nullable<int> loadPortID, Nullable<int> destinationPortID, Nullable<int> deliveryPlaceID, Nullable<int> receiptPlaceID, Nullable<int> countryofOriginID, Nullable<int> transporterID, Nullable<System.DateTime> collectionDate, string deliveryInstructions, string truckRegNo, string driverDetails, string remarks, string rotationNo, Nullable<int> carrierID, string collectionPoint, string deliveryNote, string deliveryPoint, string collectionInstructions, Nullable<int> invoiceNo, Nullable<System.DateTime> invoiceDate, Nullable<int> jobID, Nullable<int> mainJobID, string shippingInstruction, Nullable<System.DateTime> deliveryDate, Nullable<System.DateTime> departingDate, string flight, string mAWB, string hAWB, string mRN, Nullable<System.DateTime> deliveryOrderDate)
        {
            var jobCodeParameter = jobCode != null ?
                new ObjectParameter("JobCode", jobCode) :
                new ObjectParameter("JobCode", typeof(string));
    
            var jobTypeIDParameter = jobTypeID.HasValue ?
                new ObjectParameter("JobTypeID", jobTypeID) :
                new ObjectParameter("JobTypeID", typeof(int));
    
            var jobDateParameter = jobDate.HasValue ?
                new ObjectParameter("JobDate", jobDate) :
                new ObjectParameter("JobDate", typeof(System.DateTime));
    
            var consignerIDParameter = consignerID.HasValue ?
                new ObjectParameter("ConsignerID", consignerID) :
                new ObjectParameter("ConsignerID", typeof(int));
    
            var consigneeIDParameter = consigneeID.HasValue ?
                new ObjectParameter("ConsigneeID", consigneeID) :
                new ObjectParameter("ConsigneeID", typeof(int));
    
            var invoiceToIDParameter = invoiceToID.HasValue ?
                new ObjectParameter("InvoiceToID", invoiceToID) :
                new ObjectParameter("InvoiceToID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shipperIDParameter = shipperID.HasValue ?
                new ObjectParameter("ShipperID", shipperID) :
                new ObjectParameter("ShipperID", typeof(int));
    
            var iPTNoParameter = iPTNo != null ?
                new ObjectParameter("IPTNo", iPTNo) :
                new ObjectParameter("IPTNo", typeof(string));
    
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            var billOfEnquiryParameter = billOfEnquiry != null ?
                new ObjectParameter("BillOfEnquiry", billOfEnquiry) :
                new ObjectParameter("BillOfEnquiry", typeof(string));
    
            var bLDateParameter = bLDate.HasValue ?
                new ObjectParameter("BLDate", bLDate) :
                new ObjectParameter("BLDate", typeof(System.DateTime));
    
            var deliveryOrderNoParameter = deliveryOrderNo != null ?
                new ObjectParameter("DeliveryOrderNo", deliveryOrderNo) :
                new ObjectParameter("DeliveryOrderNo", typeof(string));
    
            var bLStatus1Parameter = bLStatus1 != null ?
                new ObjectParameter("BLStatus1", bLStatus1) :
                new ObjectParameter("BLStatus1", typeof(string));
    
            var cLFValueParameter = cLFValue != null ?
                new ObjectParameter("CLFValue", cLFValue) :
                new ObjectParameter("CLFValue", typeof(string));
    
            var depositAmountParameter = depositAmount.HasValue ?
                new ObjectParameter("DepositAmount", depositAmount) :
                new ObjectParameter("DepositAmount", typeof(decimal));
    
            var depositDateParameter = depositDate.HasValue ?
                new ObjectParameter("DepositDate", depositDate) :
                new ObjectParameter("DepositDate", typeof(System.DateTime));
    
            var receiptNoParameter = receiptNo != null ?
                new ObjectParameter("ReceiptNo", receiptNo) :
                new ObjectParameter("ReceiptNo", typeof(string));
    
            var refundDateParameter = refundDate.HasValue ?
                new ObjectParameter("RefundDate", refundDate) :
                new ObjectParameter("RefundDate", typeof(System.DateTime));
    
            var refundAmountParameter = refundAmount.HasValue ?
                new ObjectParameter("RefundAmount", refundAmount) :
                new ObjectParameter("RefundAmount", typeof(decimal));
    
            var vesselIDParameter = vesselID.HasValue ?
                new ObjectParameter("VesselID", vesselID) :
                new ObjectParameter("VesselID", typeof(int));
    
            var voyageNoParameter = voyageNo != null ?
                new ObjectParameter("VoyageNo", voyageNo) :
                new ObjectParameter("VoyageNo", typeof(string));
    
            var freightParameter = freight != null ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(string));
    
            var sailingDateParameter = sailingDate.HasValue ?
                new ObjectParameter("SailingDate", sailingDate) :
                new ObjectParameter("SailingDate", typeof(System.DateTime));
    
            var arrivalDateParameter = arrivalDate.HasValue ?
                new ObjectParameter("ArrivalDate", arrivalDate) :
                new ObjectParameter("ArrivalDate", typeof(System.DateTime));
    
            var mBLParameter = mBL != null ?
                new ObjectParameter("MBL", mBL) :
                new ObjectParameter("MBL", typeof(string));
    
            var hBLParameter = hBL != null ?
                new ObjectParameter("HBL", hBL) :
                new ObjectParameter("HBL", typeof(string));
    
            var loadPortIDParameter = loadPortID.HasValue ?
                new ObjectParameter("LoadPortID", loadPortID) :
                new ObjectParameter("LoadPortID", typeof(int));
    
            var destinationPortIDParameter = destinationPortID.HasValue ?
                new ObjectParameter("DestinationPortID", destinationPortID) :
                new ObjectParameter("DestinationPortID", typeof(int));
    
            var deliveryPlaceIDParameter = deliveryPlaceID.HasValue ?
                new ObjectParameter("DeliveryPlaceID", deliveryPlaceID) :
                new ObjectParameter("DeliveryPlaceID", typeof(int));
    
            var receiptPlaceIDParameter = receiptPlaceID.HasValue ?
                new ObjectParameter("ReceiptPlaceID", receiptPlaceID) :
                new ObjectParameter("ReceiptPlaceID", typeof(int));
    
            var countryofOriginIDParameter = countryofOriginID.HasValue ?
                new ObjectParameter("CountryofOriginID", countryofOriginID) :
                new ObjectParameter("CountryofOriginID", typeof(int));
    
            var transporterIDParameter = transporterID.HasValue ?
                new ObjectParameter("TransporterID", transporterID) :
                new ObjectParameter("TransporterID", typeof(int));
    
            var collectionDateParameter = collectionDate.HasValue ?
                new ObjectParameter("CollectionDate", collectionDate) :
                new ObjectParameter("CollectionDate", typeof(System.DateTime));
    
            var deliveryInstructionsParameter = deliveryInstructions != null ?
                new ObjectParameter("DeliveryInstructions", deliveryInstructions) :
                new ObjectParameter("DeliveryInstructions", typeof(string));
    
            var truckRegNoParameter = truckRegNo != null ?
                new ObjectParameter("TruckRegNo", truckRegNo) :
                new ObjectParameter("TruckRegNo", typeof(string));
    
            var driverDetailsParameter = driverDetails != null ?
                new ObjectParameter("DriverDetails", driverDetails) :
                new ObjectParameter("DriverDetails", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var rotationNoParameter = rotationNo != null ?
                new ObjectParameter("RotationNo", rotationNo) :
                new ObjectParameter("RotationNo", typeof(string));
    
            var carrierIDParameter = carrierID.HasValue ?
                new ObjectParameter("CarrierID", carrierID) :
                new ObjectParameter("CarrierID", typeof(int));
    
            var collectionPointParameter = collectionPoint != null ?
                new ObjectParameter("CollectionPoint", collectionPoint) :
                new ObjectParameter("CollectionPoint", typeof(string));
    
            var deliveryNoteParameter = deliveryNote != null ?
                new ObjectParameter("DeliveryNote", deliveryNote) :
                new ObjectParameter("DeliveryNote", typeof(string));
    
            var deliveryPointParameter = deliveryPoint != null ?
                new ObjectParameter("DeliveryPoint", deliveryPoint) :
                new ObjectParameter("DeliveryPoint", typeof(string));
    
            var collectionInstructionsParameter = collectionInstructions != null ?
                new ObjectParameter("CollectionInstructions", collectionInstructions) :
                new ObjectParameter("CollectionInstructions", typeof(string));
    
            var invoiceNoParameter = invoiceNo.HasValue ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(int));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            var mainJobIDParameter = mainJobID.HasValue ?
                new ObjectParameter("MainJobID", mainJobID) :
                new ObjectParameter("MainJobID", typeof(int));

            var shippingInstructionParameter = shippingInstruction != null ?
             new ObjectParameter("ShippingInstruction", shippingInstruction) :
             new ObjectParameter("ShippingInstruction", typeof(string));

            var deliveryDateParameter = deliveryDate.HasValue ?
               new ObjectParameter("DeliveryDate", deliveryDate) :
               new ObjectParameter("DeliveryDate", typeof(System.DateTime));

            var departingDateParameter = departingDate.HasValue ?
                new ObjectParameter("DepartingDate", departingDate) :
                new ObjectParameter("DepartingDate", typeof(System.DateTime));

            var flightParameter = flight != null ?
                new ObjectParameter("Flight", flight) :
                new ObjectParameter("Flight", typeof(string));

            var mAWBParameter = mAWB != null ?
                new ObjectParameter("MAWB", mAWB) :
                new ObjectParameter("MAWB", typeof(string));

            var hAWBParameter = hAWB != null ?
                new ObjectParameter("HAWB", hAWB) :
                new ObjectParameter("HAWB", typeof(string));

            var mRNParameter = mRN != null ?
               new ObjectParameter("MRN", mRN) :
               new ObjectParameter("MRN", typeof(string));

            var deliveryOrderDateParameter = deliveryOrderDate != null ?
               new ObjectParameter("DeliveryOrderDate", deliveryOrderDate) :
               new ObjectParameter("DeliveryOrderDate", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateJob", jobCodeParameter, jobTypeIDParameter, jobDateParameter, consignerIDParameter, consigneeIDParameter, invoiceToIDParameter, employeeIDParameter, shipperIDParameter, iPTNoParameter, refNoParameter, billOfEnquiryParameter, bLDateParameter, deliveryOrderNoParameter, bLStatus1Parameter, cLFValueParameter, depositAmountParameter, depositDateParameter, receiptNoParameter, refundDateParameter, refundAmountParameter, vesselIDParameter, voyageNoParameter, freightParameter, sailingDateParameter, arrivalDateParameter, mBLParameter, hBLParameter, loadPortIDParameter, destinationPortIDParameter, deliveryPlaceIDParameter, receiptPlaceIDParameter, countryofOriginIDParameter, transporterIDParameter, collectionDateParameter, deliveryInstructionsParameter, truckRegNoParameter, driverDetailsParameter, remarksParameter, rotationNoParameter, carrierIDParameter, collectionPointParameter, deliveryNoteParameter, deliveryPointParameter, collectionInstructionsParameter, invoiceNoParameter, invoiceDateParameter, jobIDParameter, mainJobIDParameter, shippingInstructionParameter, deliveryDateParameter, departingDateParameter, flightParameter, mAWBParameter, hAWBParameter, mRNParameter, deliveryOrderDateParameter);
        }
    
        public virtual ObjectResult<SP_GetCostUpdationByCostID_Result> SP_GetCostUpdationByCostID(Nullable<int> costUpdationID)
        {
            var costUpdationIDParameter = costUpdationID.HasValue ?
                new ObjectParameter("CostUpdationID", costUpdationID) :
                new ObjectParameter("CostUpdationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCostUpdationByCostID_Result>("SP_GetCostUpdationByCostID", costUpdationIDParameter);
        }
    
        public virtual ObjectResult<string> SP_GetSupplierByRevenueTypeID1(Nullable<int> revenuTypeId)
        {
            var revenuTypeIdParameter = revenuTypeId.HasValue ?
                new ObjectParameter("RevenuTypeId", revenuTypeId) :
                new ObjectParameter("RevenuTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetSupplierByRevenueTypeID1", revenuTypeIdParameter);
        }
    
        public virtual int AcHeadAssignInsert(Nullable<int> provisionCostControlAcID, Nullable<int> accruedCostControlAcID, Nullable<int> openJobRevenueAcID, Nullable<int> customerControlAcID, Nullable<int> cashControlAcID, Nullable<int> supplierControlAcID)
        {
            var provisionCostControlAcIDParameter = provisionCostControlAcID.HasValue ?
                new ObjectParameter("provisionCostControlAcID", provisionCostControlAcID) :
                new ObjectParameter("provisionCostControlAcID", typeof(int));
    
            var accruedCostControlAcIDParameter = accruedCostControlAcID.HasValue ?
                new ObjectParameter("AccruedCostControlAcID", accruedCostControlAcID) :
                new ObjectParameter("AccruedCostControlAcID", typeof(int));
    
            var openJobRevenueAcIDParameter = openJobRevenueAcID.HasValue ?
                new ObjectParameter("OpenJobRevenueAcID", openJobRevenueAcID) :
                new ObjectParameter("OpenJobRevenueAcID", typeof(int));
    
            var customerControlAcIDParameter = customerControlAcID.HasValue ?
                new ObjectParameter("CustomerControlAcID", customerControlAcID) :
                new ObjectParameter("CustomerControlAcID", typeof(int));
    
            var cashControlAcIDParameter = cashControlAcID.HasValue ?
                new ObjectParameter("CashControlAcID", cashControlAcID) :
                new ObjectParameter("CashControlAcID", typeof(int));
    
            var supplierControlAcIDParameter = supplierControlAcID.HasValue ?
                new ObjectParameter("SupplierControlAcID", supplierControlAcID) :
                new ObjectParameter("SupplierControlAcID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcHeadAssignInsert", provisionCostControlAcIDParameter, accruedCostControlAcIDParameter, openJobRevenueAcIDParameter, customerControlAcIDParameter, cashControlAcIDParameter, supplierControlAcIDParameter);
        }
    
        public virtual ObjectResult<SelectFinancialYearByBranch_Result> SelectFinancialYearByBranch(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectFinancialYearByBranch_Result>("SelectFinancialYearByBranch", branchIDParameter);
        }
    
        public virtual int AcCategoryDelete(string acCategoryIDs)
        {
            var acCategoryIDsParameter = acCategoryIDs != null ?
                new ObjectParameter("AcCategoryIDs", acCategoryIDs) :
                new ObjectParameter("AcCategoryIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcCategoryDelete", acCategoryIDsParameter);
        }
    
        public virtual int AcCategoryInsert(string acCategory)
        {
            var acCategoryParameter = acCategory != null ?
                new ObjectParameter("AcCategory", acCategory) :
                new ObjectParameter("AcCategory", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcCategoryInsert", acCategoryParameter);
        }
    
        public virtual ObjectResult<AcCategorySelect_Result> AcCategorySelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcCategorySelect_Result>("AcCategorySelect");
        }
    
        public virtual ObjectResult<AcCategorySelectAll_Result> AcCategorySelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcCategorySelectAll_Result>("AcCategorySelectAll");
        }
    
        public virtual ObjectResult<AcCategorySelectByID_Result> AcCategorySelectByID(Nullable<int> acCategoryID)
        {
            var acCategoryIDParameter = acCategoryID.HasValue ?
                new ObjectParameter("AcCategoryID", acCategoryID) :
                new ObjectParameter("AcCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcCategorySelectByID_Result>("AcCategorySelectByID", acCategoryIDParameter);
        }
    
        public virtual int AcCategoryUpdate(Nullable<int> acCategoryID, string acCategory)
        {
            var acCategoryIDParameter = acCategoryID.HasValue ?
                new ObjectParameter("AcCategoryID", acCategoryID) :
                new ObjectParameter("AcCategoryID", typeof(int));
    
            var acCategoryParameter = acCategory != null ?
                new ObjectParameter("AcCategory", acCategory) :
                new ObjectParameter("AcCategory", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcCategoryUpdate", acCategoryIDParameter, acCategoryParameter);
        }
    
        public virtual ObjectResult<AcCompanySelectAll_Result> AcCompanySelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcCompanySelectAll_Result>("AcCompanySelectAll");
        }
    
        public virtual int AcGroupDelete(string acGroupIDs)
        {
            var acGroupIDsParameter = acGroupIDs != null ?
                new ObjectParameter("AcGroupIDs", acGroupIDs) :
                new ObjectParameter("AcGroupIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcGroupDelete", acGroupIDsParameter);
        }
    
        public virtual int AcGroupInsert(Nullable<int> acCategoryID, string acGroup, Nullable<int> parentID, Nullable<int> acCompanyID, Nullable<int> userID, Nullable<short> isGroupcodeAuto, string groupCode)
        {
            var acCategoryIDParameter = acCategoryID.HasValue ?
                new ObjectParameter("AcCategoryID", acCategoryID) :
                new ObjectParameter("AcCategoryID", typeof(int));
    
            var acGroupParameter = acGroup != null ?
                new ObjectParameter("AcGroup", acGroup) :
                new ObjectParameter("AcGroup", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isGroupcodeAutoParameter = isGroupcodeAuto.HasValue ?
                new ObjectParameter("IsGroupcodeAuto", isGroupcodeAuto) :
                new ObjectParameter("IsGroupcodeAuto", typeof(short));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcGroupInsert", acCategoryIDParameter, acGroupParameter, parentIDParameter, acCompanyIDParameter, userIDParameter, isGroupcodeAutoParameter, groupCodeParameter);
        }
    
        public virtual ObjectResult<AcGroupSelectByCategoryID_Result> AcGroupSelectByCategoryID(Nullable<int> acCategoryID, Nullable<int> branchID)
        {
            var acCategoryIDParameter = acCategoryID.HasValue ?
                new ObjectParameter("AcCategoryID", acCategoryID) :
                new ObjectParameter("AcCategoryID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcGroupSelectByCategoryID_Result>("AcGroupSelectByCategoryID", acCategoryIDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<AcGroupSelectByID_Result> AcGroupSelectByID(Nullable<int> acGroupID)
        {
            var acGroupIDParameter = acGroupID.HasValue ?
                new ObjectParameter("AcGroupID", acGroupID) :
                new ObjectParameter("AcGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcGroupSelectByID_Result>("AcGroupSelectByID", acGroupIDParameter);
        }
    
        public virtual int AcGroupUpdate(Nullable<int> acGroupID, Nullable<int> parentID, string acGroup, Nullable<int> acCategoryID, Nullable<short> isGroupcodeAuto, string groupCode)
        {
            var acGroupIDParameter = acGroupID.HasValue ?
                new ObjectParameter("AcGroupID", acGroupID) :
                new ObjectParameter("AcGroupID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var acGroupParameter = acGroup != null ?
                new ObjectParameter("AcGroup", acGroup) :
                new ObjectParameter("AcGroup", typeof(string));
    
            var acCategoryIDParameter = acCategoryID.HasValue ?
                new ObjectParameter("AcCategoryID", acCategoryID) :
                new ObjectParameter("AcCategoryID", typeof(int));
    
            var isGroupcodeAutoParameter = isGroupcodeAuto.HasValue ?
                new ObjectParameter("IsGroupcodeAuto", isGroupcodeAuto) :
                new ObjectParameter("IsGroupcodeAuto", typeof(short));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcGroupUpdate", acGroupIDParameter, parentIDParameter, acGroupParameter, acCategoryIDParameter, isGroupcodeAutoParameter, groupCodeParameter);
        }
    
        public virtual ObjectResult<AcHeadAssignSelectAll_Result> AcHeadAssignSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcHeadAssignSelectAll_Result>("AcHeadAssignSelectAll");
        }
    
        public virtual int AcHeadAssignUpdate(Nullable<int> provisionCostControlAcID, Nullable<int> accruedCostControlAcID, Nullable<int> openJobRevenueAcID, Nullable<int> customerControlAcID, Nullable<int> cashControlAcID, Nullable<int> supplierControlAcID, Nullable<int> iD)
        {
            var provisionCostControlAcIDParameter = provisionCostControlAcID.HasValue ?
                new ObjectParameter("ProvisionCostControlAcID", provisionCostControlAcID) :
                new ObjectParameter("ProvisionCostControlAcID", typeof(int));
    
            var accruedCostControlAcIDParameter = accruedCostControlAcID.HasValue ?
                new ObjectParameter("AccruedCostControlAcID", accruedCostControlAcID) :
                new ObjectParameter("AccruedCostControlAcID", typeof(int));
    
            var openJobRevenueAcIDParameter = openJobRevenueAcID.HasValue ?
                new ObjectParameter("OpenJobRevenueAcID", openJobRevenueAcID) :
                new ObjectParameter("OpenJobRevenueAcID", typeof(int));
    
            var customerControlAcIDParameter = customerControlAcID.HasValue ?
                new ObjectParameter("CustomerControlAcID", customerControlAcID) :
                new ObjectParameter("CustomerControlAcID", typeof(int));
    
            var cashControlAcIDParameter = cashControlAcID.HasValue ?
                new ObjectParameter("CashControlAcID", cashControlAcID) :
                new ObjectParameter("CashControlAcID", typeof(int));
    
            var supplierControlAcIDParameter = supplierControlAcID.HasValue ?
                new ObjectParameter("SupplierControlAcID", supplierControlAcID) :
                new ObjectParameter("SupplierControlAcID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcHeadAssignUpdate", provisionCostControlAcIDParameter, accruedCostControlAcIDParameter, openJobRevenueAcIDParameter, customerControlAcIDParameter, cashControlAcIDParameter, supplierControlAcIDParameter, iDParameter);
        }
    
        public virtual int AcHeadDelete(string acHeadIDs)
        {
            var acHeadIDsParameter = acHeadIDs != null ?
                new ObjectParameter("AcHeadIDs", acHeadIDs) :
                new ObjectParameter("AcHeadIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcHeadDelete", acHeadIDsParameter);
        }
    
        public virtual int AcHeadInsert(Nullable<int> acHeadID, string acHeadKey, string acHead, Nullable<int> acGroupID, Nullable<int> userID, string prefix)
        {
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var acHeadKeyParameter = acHeadKey != null ?
                new ObjectParameter("AcHeadKey", acHeadKey) :
                new ObjectParameter("AcHeadKey", typeof(string));
    
            var acHeadParameter = acHead != null ?
                new ObjectParameter("AcHead", acHead) :
                new ObjectParameter("AcHead", typeof(string));
    
            var acGroupIDParameter = acGroupID.HasValue ?
                new ObjectParameter("AcGroupID", acGroupID) :
                new ObjectParameter("AcGroupID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcHeadInsert", acHeadIDParameter, acHeadKeyParameter, acHeadParameter, acGroupIDParameter, userIDParameter, prefixParameter);
        }
    
        public virtual ObjectResult<AcHeadSelectAll_Result> AcHeadSelectAll(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcHeadSelectAll_Result>("AcHeadSelectAll", branchIDParameter);
        }      

        public virtual ObjectResult<AcHeadSelectByID_Result> AcHeadSelectByID(Nullable<int> acHeadID)
        {
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcHeadSelectByID_Result>("AcHeadSelectByID", acHeadIDParameter);
        }
    
        public virtual int AcHeadUpdate(string acHeadKey, Nullable<int> acHeadID, string acHead, Nullable<int> acGroupID, string prefix)
        {
            var acHeadKeyParameter = acHeadKey != null ?
                new ObjectParameter("AcHeadKey", acHeadKey) :
                new ObjectParameter("AcHeadKey", typeof(string));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var acHeadParameter = acHead != null ?
                new ObjectParameter("AcHead", acHead) :
                new ObjectParameter("AcHead", typeof(string));
    
            var acGroupIDParameter = acGroupID.HasValue ?
                new ObjectParameter("AcGroupID", acGroupID) :
                new ObjectParameter("AcGroupID", typeof(int));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcHeadUpdate", acHeadKeyParameter, acHeadIDParameter, acHeadParameter, acGroupIDParameter, prefixParameter);
        }
    
        public virtual int AnalysisGroupDelete(string analysisGroupIDs)
        {
            var analysisGroupIDsParameter = analysisGroupIDs != null ?
                new ObjectParameter("AnalysisGroupIDs", analysisGroupIDs) :
                new ObjectParameter("AnalysisGroupIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AnalysisGroupDelete", analysisGroupIDsParameter);
        }
    
        public virtual int AnalysisGroupInsert(Nullable<int> analysisGroupID, string analysisGroup)
        {
            var analysisGroupIDParameter = analysisGroupID.HasValue ?
                new ObjectParameter("AnalysisGroupID", analysisGroupID) :
                new ObjectParameter("AnalysisGroupID", typeof(int));
    
            var analysisGroupParameter = analysisGroup != null ?
                new ObjectParameter("AnalysisGroup", analysisGroup) :
                new ObjectParameter("AnalysisGroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AnalysisGroupInsert", analysisGroupIDParameter, analysisGroupParameter);
        }
    
        public virtual ObjectResult<AnalysisGroupSelectAll_Result> AnalysisGroupSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnalysisGroupSelectAll_Result>("AnalysisGroupSelectAll");
        }
    
        public virtual ObjectResult<AnalysisGroupSelectByID_Result> AnalysisGroupSelectByID(Nullable<int> analysisGroupID)
        {
            var analysisGroupIDParameter = analysisGroupID.HasValue ?
                new ObjectParameter("AnalysisGroupID", analysisGroupID) :
                new ObjectParameter("AnalysisGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnalysisGroupSelectByID_Result>("AnalysisGroupSelectByID", analysisGroupIDParameter);
        }
    
        public virtual int AnalysisGroupUpdate(Nullable<int> analysisGroupID, string analysisGroup)
        {
            var analysisGroupIDParameter = analysisGroupID.HasValue ?
                new ObjectParameter("AnalysisGroupID", analysisGroupID) :
                new ObjectParameter("AnalysisGroupID", typeof(int));
    
            var analysisGroupParameter = analysisGroup != null ?
                new ObjectParameter("AnalysisGroup", analysisGroup) :
                new ObjectParameter("AnalysisGroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AnalysisGroupUpdate", analysisGroupIDParameter, analysisGroupParameter);
        }
    
        public virtual int AnalysisHeadDelete(string analysisHeadIDs)
        {
            var analysisHeadIDsParameter = analysisHeadIDs != null ?
                new ObjectParameter("AnalysisHeadIDs", analysisHeadIDs) :
                new ObjectParameter("AnalysisHeadIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AnalysisHeadDelete", analysisHeadIDsParameter);
        }
    
        public virtual int AnalysisHeadInsert(string analysisCode, string analysisHead, Nullable<int> analysisGroupID, Nullable<int> branchID)
        {
            var analysisCodeParameter = analysisCode != null ?
                new ObjectParameter("AnalysisCode", analysisCode) :
                new ObjectParameter("AnalysisCode", typeof(string));
    
            var analysisHeadParameter = analysisHead != null ?
                new ObjectParameter("AnalysisHead", analysisHead) :
                new ObjectParameter("AnalysisHead", typeof(string));
    
            var analysisGroupIDParameter = analysisGroupID.HasValue ?
                new ObjectParameter("AnalysisGroupID", analysisGroupID) :
                new ObjectParameter("AnalysisGroupID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AnalysisHeadInsert", analysisCodeParameter, analysisHeadParameter, analysisGroupIDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<AnalysisHeadSelectAll_Result> AnalysisHeadSelectAll(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnalysisHeadSelectAll_Result>("AnalysisHeadSelectAll", branchIDParameter);
        }
    
        public virtual ObjectResult<AnalysisHeadSelectByID_Result> AnalysisHeadSelectByID(Nullable<int> analysisHeadID)
        {
            var analysisHeadIDParameter = analysisHeadID.HasValue ?
                new ObjectParameter("AnalysisHeadID", analysisHeadID) :
                new ObjectParameter("AnalysisHeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnalysisHeadSelectByID_Result>("AnalysisHeadSelectByID", analysisHeadIDParameter);
        }
    
        public virtual int AnalysisHeadUpdate(Nullable<int> analysisHeadID, string analysisCode, string analysisHead, Nullable<int> analysisGroupID)
        {
            var analysisHeadIDParameter = analysisHeadID.HasValue ?
                new ObjectParameter("AnalysisHeadID", analysisHeadID) :
                new ObjectParameter("AnalysisHeadID", typeof(int));
    
            var analysisCodeParameter = analysisCode != null ?
                new ObjectParameter("AnalysisCode", analysisCode) :
                new ObjectParameter("AnalysisCode", typeof(string));
    
            var analysisHeadParameter = analysisHead != null ?
                new ObjectParameter("AnalysisHead", analysisHead) :
                new ObjectParameter("AnalysisHead", typeof(string));
    
            var analysisGroupIDParameter = analysisGroupID.HasValue ?
                new ObjectParameter("AnalysisGroupID", analysisGroupID) :
                new ObjectParameter("AnalysisGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AnalysisHeadUpdate", analysisHeadIDParameter, analysisCodeParameter, analysisHeadParameter, analysisGroupIDParameter);
        }
    
        public virtual int AcJournalDetailDelete(string acJournalDetailIDs)
        {
            var acJournalDetailIDsParameter = acJournalDetailIDs != null ?
                new ObjectParameter("AcJournalDetailIDs", acJournalDetailIDs) :
                new ObjectParameter("AcJournalDetailIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcJournalDetailDelete", acJournalDetailIDsParameter);
        }
    
        public virtual int AcJournalDetailInsert(Nullable<int> acJournalID, Nullable<int> acHeadID, Nullable<decimal> amount, string remark, Nullable<int> branchID)
        {
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcJournalDetailInsert", acJournalIDParameter, acHeadIDParameter, amountParameter, remarkParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<AcJournalDetailSelectByAcJournalIDJV_Result> AcJournalDetailSelectByAcJournalIDJV(Nullable<int> acJournalID)
        {
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcJournalDetailSelectByAcJournalIDJV_Result>("AcJournalDetailSelectByAcJournalIDJV", acJournalIDParameter);
        }
    
        public virtual int AcJournalMasterDelete(string acJournalIDs)
        {
            var acJournalIDsParameter = acJournalIDs != null ?
                new ObjectParameter("AcJournalIDs", acJournalIDs) :
                new ObjectParameter("AcJournalIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcJournalMasterDelete", acJournalIDsParameter);
        }
    
        public virtual int AcJournalMasterInsertJV(string transactionNo, Nullable<System.DateTime> transDate, Nullable<int> acFinancialYearID, string voucherType, Nullable<short> transType, string remark, Nullable<int> userID, Nullable<int> branchID, string reference, string acJournalDetail, string acAnalysisHeadDetail)
        {
            var transactionNoParameter = transactionNo != null ?
              new ObjectParameter("TransactionNo", transactionNo) :
              new ObjectParameter("TransactionNo", typeof(string));

            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var acFinancialYearIDParameter = acFinancialYearID.HasValue ?
                new ObjectParameter("AcFinancialYearID", acFinancialYearID) :
                new ObjectParameter("AcFinancialYearID", typeof(int));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("VoucherType", voucherType) :
                new ObjectParameter("VoucherType", typeof(string));
    
            var transTypeParameter = transType.HasValue ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(short));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var acJournalDetailParameter = acJournalDetail != null ?
                new ObjectParameter("AcJournalDetail", acJournalDetail) :
                new ObjectParameter("AcJournalDetail", typeof(string));
    
            var acAnalysisHeadDetailParameter = acAnalysisHeadDetail != null ?
                new ObjectParameter("AcAnalysisHeadDetail", acAnalysisHeadDetail) :
                new ObjectParameter("AcAnalysisHeadDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcJournalMasterInsertJV", transactionNoParameter, transDateParameter, acFinancialYearIDParameter, voucherTypeParameter, transTypeParameter, remarkParameter, userIDParameter, branchIDParameter, referenceParameter, acJournalDetailParameter, acAnalysisHeadDetailParameter);
        }
    
        public virtual ObjectResult<AcJournalMasterSelectAllJV_Result> AcJournalMasterSelectAllJV(Nullable<int> fYearID, Nullable<int> branchID)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcJournalMasterSelectAllJV_Result>("AcJournalMasterSelectAllJV", fYearIDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<AcJournalMasterSelectByID_Result> AcJournalMasterSelectByID(Nullable<int> acJournalID)
        {
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcJournalMasterSelectByID_Result>("AcJournalMasterSelectByID", acJournalIDParameter);
        }
    
        public virtual int AcJournalMasterUpdateJV(Nullable<int> acJournalID, Nullable<System.DateTime> transDate, string remark, Nullable<int> userID, string reference)
        {
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcJournalMasterUpdateJV", acJournalIDParameter, transDateParameter, remarkParameter, userIDParameter, referenceParameter);
        }
    
        public virtual ObjectResult<GetBankReconciliation_Result> GetBankReconciliation(Nullable<int> fyearID, Nullable<int> branchID)
        {
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankReconciliation_Result>("GetBankReconciliation", fyearIDParameter, branchIDParameter);
        }
    
        public virtual int AcOpeningMasterInsert(Nullable<int> fYearID, Nullable<System.DateTime> oPDate, Nullable<int> acHeadID, Nullable<decimal> amount, Nullable<int> branchID)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var oPDateParameter = oPDate.HasValue ?
                new ObjectParameter("OPDate", oPDate) :
                new ObjectParameter("OPDate", typeof(System.DateTime));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcOpeningMasterInsert", fYearIDParameter, oPDateParameter, acHeadIDParameter, amountParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<AcOpeningMasterSelectAll_Result> AcOpeningMasterSelectAll(Nullable<int> fyearID, Nullable<int> companyID)
        {
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcOpeningMasterSelectAll_Result>("AcOpeningMasterSelectAll", fyearIDParameter, companyIDParameter);
        }
   
    
        public virtual ObjectResult<AcBankDetailsByAcJournalID_Result> AcBankDetailsByAcJournalID(Nullable<int> acJournalID)
        {
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcBankDetailsByAcJournalID_Result>("AcBankDetailsByAcJournalID", acJournalIDParameter);
        }
    
        public virtual ObjectResult<AcHeadSelectForCash_Result> AcHeadSelectForCash(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcHeadSelectForCash_Result>("AcHeadSelectForCash", branchIDParameter);
        }
    
        public virtual int AcJournalMasterInsert(Nullable<System.DateTime> transDate, Nullable<int> acFinancialYearID, string voucherType, Nullable<int> acHeadID, Nullable<short> transType, string remark, Nullable<int> userID, Nullable<decimal> amount, Nullable<int> branchID, string reference, string acJournalDetail, string acAnalysisHeadDetail, string bankName, string chequeNo, Nullable<System.DateTime> chequeDate, string partyName)
        {
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var acFinancialYearIDParameter = acFinancialYearID.HasValue ?
                new ObjectParameter("AcFinancialYearID", acFinancialYearID) :
                new ObjectParameter("AcFinancialYearID", typeof(int));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("VoucherType", voucherType) :
                new ObjectParameter("VoucherType", typeof(string));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var transTypeParameter = transType.HasValue ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(short));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var acJournalDetailParameter = acJournalDetail != null ?
                new ObjectParameter("AcJournalDetail", acJournalDetail) :
                new ObjectParameter("AcJournalDetail", typeof(string));
    
            var acAnalysisHeadDetailParameter = acAnalysisHeadDetail != null ?
                new ObjectParameter("AcAnalysisHeadDetail", acAnalysisHeadDetail) :
                new ObjectParameter("AcAnalysisHeadDetail", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcJournalMasterInsert", transDateParameter, acFinancialYearIDParameter, voucherTypeParameter, acHeadIDParameter, transTypeParameter, remarkParameter, userIDParameter, amountParameter, branchIDParameter, referenceParameter, acJournalDetailParameter, acAnalysisHeadDetailParameter, bankNameParameter, chequeNoParameter, chequeDateParameter, partyNameParameter);
        }
    
        public virtual ObjectResult<AcJournalMasterSelectAll_Result> AcJournalMasterSelectAll(Nullable<int> fYearID, Nullable<int> branchID)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcJournalMasterSelectAll_Result>("AcJournalMasterSelectAll", fYearIDParameter, branchIDParameter);
        }
    
        public virtual int AcJournalMasterUpdate(Nullable<int> acJournalID, Nullable<System.DateTime> transDate, string remark, Nullable<int> userID, Nullable<decimal> amount, string reference, string voucherType, Nullable<int> branchID, Nullable<int> acFinancialYearID, Nullable<int> acHeadID, string acJournalDetail, string acAnalysisHeadDetail, string bankName, string chequeNo, Nullable<System.DateTime> chequeDate, string partyName)
        {
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("VoucherType", voucherType) :
                new ObjectParameter("VoucherType", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var acFinancialYearIDParameter = acFinancialYearID.HasValue ?
                new ObjectParameter("AcFinancialYearID", acFinancialYearID) :
                new ObjectParameter("AcFinancialYearID", typeof(int));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var acJournalDetailParameter = acJournalDetail != null ?
                new ObjectParameter("AcJournalDetail", acJournalDetail) :
                new ObjectParameter("AcJournalDetail", typeof(string));
    
            var acAnalysisHeadDetailParameter = acAnalysisHeadDetail != null ?
                new ObjectParameter("AcAnalysisHeadDetail", acAnalysisHeadDetail) :
                new ObjectParameter("AcAnalysisHeadDetail", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcJournalMasterUpdate", acJournalIDParameter, transDateParameter, remarkParameter, userIDParameter, amountParameter, referenceParameter, voucherTypeParameter, branchIDParameter, acFinancialYearIDParameter, acHeadIDParameter, acJournalDetailParameter, acAnalysisHeadDetailParameter, bankNameParameter, chequeNoParameter, chequeDateParameter, partyNameParameter);
        }
    
        public virtual ObjectResult<AcMemoBankDetailsByAcJournalID_Result> AcMemoBankDetailsByAcJournalID(Nullable<int> acMemoJournalID)
        {
            var acMemoJournalIDParameter = acMemoJournalID.HasValue ?
                new ObjectParameter("AcMemoJournalID", acMemoJournalID) :
                new ObjectParameter("AcMemoJournalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcMemoBankDetailsByAcJournalID_Result>("AcMemoBankDetailsByAcJournalID", acMemoJournalIDParameter);
        }
    
        public virtual ObjectResult<AcMemoJournalDetailSelectByAcJournalID_Result> AcMemoJournalDetailSelectByAcJournalID(Nullable<int> acMemoJournalID)
        {
            var acMemoJournalIDParameter = acMemoJournalID.HasValue ?
                new ObjectParameter("AcMemoJournalID", acMemoJournalID) :
                new ObjectParameter("AcMemoJournalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcMemoJournalDetailSelectByAcJournalID_Result>("AcMemoJournalDetailSelectByAcJournalID", acMemoJournalIDParameter);
        }
    
        public virtual int AcMemoJournalMasterDelete(string acMemoJournalIDs)
        {
            var acMemoJournalIDsParameter = acMemoJournalIDs != null ?
                new ObjectParameter("AcMemoJournalIDs", acMemoJournalIDs) :
                new ObjectParameter("AcMemoJournalIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcMemoJournalMasterDelete", acMemoJournalIDsParameter);
        }
    
        public virtual int AcMemoJournalMasterInsert(Nullable<System.DateTime> transDate, Nullable<int> acFinancialYearID, string voucherType, Nullable<int> acHeadID, Nullable<short> transType, string remark, Nullable<int> userID, Nullable<decimal> amount, Nullable<int> branchID, string reference, string acJournalDetail, string acAnalysisHeadDetail, string bankName, string chequeNo, Nullable<System.DateTime> chequeDate, string partyName, string statusTrans)
        {
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var acFinancialYearIDParameter = acFinancialYearID.HasValue ?
                new ObjectParameter("AcFinancialYearID", acFinancialYearID) :
                new ObjectParameter("AcFinancialYearID", typeof(int));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("VoucherType", voucherType) :
                new ObjectParameter("VoucherType", typeof(string));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var transTypeParameter = transType.HasValue ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(short));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var acJournalDetailParameter = acJournalDetail != null ?
                new ObjectParameter("AcJournalDetail", acJournalDetail) :
                new ObjectParameter("AcJournalDetail", typeof(string));
    
            var acAnalysisHeadDetailParameter = acAnalysisHeadDetail != null ?
                new ObjectParameter("AcAnalysisHeadDetail", acAnalysisHeadDetail) :
                new ObjectParameter("AcAnalysisHeadDetail", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var statusTransParameter = statusTrans != null ?
                new ObjectParameter("StatusTrans", statusTrans) :
                new ObjectParameter("StatusTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcMemoJournalMasterInsert", transDateParameter, acFinancialYearIDParameter, voucherTypeParameter, acHeadIDParameter, transTypeParameter, remarkParameter, userIDParameter, amountParameter, branchIDParameter, referenceParameter, acJournalDetailParameter, acAnalysisHeadDetailParameter, bankNameParameter, chequeNoParameter, chequeDateParameter, partyNameParameter, statusTransParameter);
        }
    
        public virtual ObjectResult<AcMemoJournalMasterSelectAll_Result> AcMemoJournalMasterSelectAll(Nullable<int> fYearID, Nullable<int> branchID)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcMemoJournalMasterSelectAll_Result>("AcMemoJournalMasterSelectAll", fYearIDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<AcMemoJournalMasterSelectByID_Result> AcMemoJournalMasterSelectByID(Nullable<int> acMemoJournalID)
        {
            var acMemoJournalIDParameter = acMemoJournalID.HasValue ?
                new ObjectParameter("AcMemoJournalID", acMemoJournalID) :
                new ObjectParameter("AcMemoJournalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcMemoJournalMasterSelectByID_Result>("AcMemoJournalMasterSelectByID", acMemoJournalIDParameter);
        }
    
        public virtual int ConvertJournaltoPDC(string acMemoJournalIDs)
        {
            var acMemoJournalIDsParameter = acMemoJournalIDs != null ?
                new ObjectParameter("AcMemoJournalIDs", acMemoJournalIDs) :
                new ObjectParameter("AcMemoJournalIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConvertJournaltoPDC", acMemoJournalIDsParameter);
        }
    
        public virtual int ConvertPDCtoJournal(string acMemoJournalIDs, Nullable<System.DateTime> transDate)
        {
            var acMemoJournalIDsParameter = acMemoJournalIDs != null ?
                new ObjectParameter("AcMemoJournalIDs", acMemoJournalIDs) :
                new ObjectParameter("AcMemoJournalIDs", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConvertPDCtoJournal", acMemoJournalIDsParameter, transDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetAccountBalanceByHeadID(Nullable<int> acHeadID, Nullable<int> fyearID)
        {
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetAccountBalanceByHeadID", acHeadIDParameter, fyearIDParameter);
        }
    
        public virtual ObjectResult<GetAcHeadByID_Result> GetAcHeadByID(Nullable<int> iD, Nullable<int> branchID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAcHeadByID_Result>("GetAcHeadByID", iDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<GetPDCReminder_Result> GetPDCReminder(Nullable<System.DateTime> maturedDate, Nullable<int> flag, Nullable<int> branchID)
        {
            var maturedDateParameter = maturedDate.HasValue ?
                new ObjectParameter("MaturedDate", maturedDate) :
                new ObjectParameter("MaturedDate", typeof(System.DateTime));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPDCReminder_Result>("GetPDCReminder", maturedDateParameter, flagParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<Report_AnalysisHeadExpenses_Result> Report_AnalysisHeadExpenses(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> branchID, Nullable<int> analysisHeadID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var analysisHeadIDParameter = analysisHeadID.HasValue ?
                new ObjectParameter("AnalysisHeadID", analysisHeadID) :
                new ObjectParameter("AnalysisHeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_AnalysisHeadExpenses_Result>("Report_AnalysisHeadExpenses", fromDateParameter, toDateParameter, branchIDParameter, analysisHeadIDParameter);
        }
    
        public virtual ObjectResult<Report_BalanceSheet_Result> Report_BalanceSheet(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> fyearID, Nullable<int> acCompanyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_BalanceSheet_Result>("Report_BalanceSheet", fromDateParameter, toDateParameter, fyearIDParameter, acCompanyIDParameter);
        }
    
        public virtual ObjectResult<Report_CashAndBankBook_Result> Report_CashAndBankBook(Nullable<int> fYearID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> acHeadID, Nullable<int> acCompanyID)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_CashAndBankBook_Result>("Report_CashAndBankBook", fYearIDParameter, fromDateParameter, toDateParameter, acHeadIDParameter, acCompanyIDParameter);
        }
    
        public virtual ObjectResult<Report_CashBook_Result> Report_CashBook(Nullable<int> fYearID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> acHeadID, Nullable<int> acCompanyID)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_CashBook_Result>("Report_CashBook", fYearIDParameter, fromDateParameter, toDateParameter, acHeadIDParameter, acCompanyIDParameter);
        }
    
        public virtual ObjectResult<Report_ProfitAndLossAccount_Result> Report_ProfitAndLossAccount(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> acCompanyID, Nullable<int> fyearID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_ProfitAndLossAccount_Result>("Report_ProfitAndLossAccount", fromDateParameter, toDateParameter, acCompanyIDParameter, fyearIDParameter);
        }
    
        public virtual ObjectResult<Report_TrialBalance_Result> Report_TrialBalance(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> acCompanyID, Nullable<int> fyearID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_TrialBalance_Result>("Report_TrialBalance", fromDateParameter, toDateParameter, acCompanyIDParameter, fyearIDParameter);
        }
    
        public virtual ObjectResult<AcHeadSelectForBank_Result> AcHeadSelectForBank(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcHeadSelectForBank_Result>("AcHeadSelectForBank", branchIDParameter);
        }
    
        public virtual int SaveFinancialYear(Nullable<int> acFyearID, Nullable<int> acCompanyID, Nullable<System.DateTime> newAcFyearFrom, Nullable<System.DateTime> newFyearTo, string newReferenceName, Nullable<int> userID, Nullable<int> newFinancialYearID)
        {
            var acFyearIDParameter = acFyearID.HasValue ?
                new ObjectParameter("AcFyearID", acFyearID) :
                new ObjectParameter("AcFyearID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var newAcFyearFromParameter = newAcFyearFrom.HasValue ?
                new ObjectParameter("NewAcFyearFrom", newAcFyearFrom) :
                new ObjectParameter("NewAcFyearFrom", typeof(System.DateTime));
    
            var newFyearToParameter = newFyearTo.HasValue ?
                new ObjectParameter("NewFyearTo", newFyearTo) :
                new ObjectParameter("NewFyearTo", typeof(System.DateTime));
    
            var newReferenceNameParameter = newReferenceName != null ?
                new ObjectParameter("NewReferenceName", newReferenceName) :
                new ObjectParameter("NewReferenceName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var newFinancialYearIDParameter = newFinancialYearID.HasValue ?
                new ObjectParameter("NewFinancialYearID", newFinancialYearID) :
                new ObjectParameter("NewFinancialYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveFinancialYear", acFyearIDParameter, acCompanyIDParameter, newAcFyearFromParameter, newFyearToParameter, newReferenceNameParameter, userIDParameter, newFinancialYearIDParameter);
        }
    
        public virtual ObjectResult<AcGroupSelectAll_Result> AcGroupSelectAll(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcGroupSelectAll_Result>("AcGroupSelectAll", branchIDParameter);
        }
    
        public virtual ObjectResult<Report_DayBook_Result> Report_DayBook(Nullable<int> fYearID, Nullable<int> acCompanyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> acHeadID, Nullable<int> rentFlag, Nullable<decimal> monthlyRent1, Nullable<decimal> monthlyRent2)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var rentFlagParameter = rentFlag.HasValue ?
                new ObjectParameter("RentFlag", rentFlag) :
                new ObjectParameter("RentFlag", typeof(int));
    
            var monthlyRent1Parameter = monthlyRent1.HasValue ?
                new ObjectParameter("MonthlyRent1", monthlyRent1) :
                new ObjectParameter("MonthlyRent1", typeof(decimal));
    
            var monthlyRent2Parameter = monthlyRent2.HasValue ?
                new ObjectParameter("MonthlyRent2", monthlyRent2) :
                new ObjectParameter("MonthlyRent2", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_DayBook_Result>("Report_DayBook", fYearIDParameter, acCompanyIDParameter, fromDateParameter, toDateParameter, acHeadIDParameter, rentFlagParameter, monthlyRent1Parameter, monthlyRent2Parameter);
        }
    
        public virtual ObjectResult<GetOpeningBalanceForYE_Result> GetOpeningBalanceForYE(Nullable<int> acFyearID, Nullable<int> acCompanyID)
        {
            var acFyearIDParameter = acFyearID.HasValue ?
                new ObjectParameter("AcFyearID", acFyearID) :
                new ObjectParameter("AcFyearID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOpeningBalanceForYE_Result>("GetOpeningBalanceForYE", acFyearIDParameter, acCompanyIDParameter);
        }
    
        public virtual ObjectResult<AcFinancialYearSelect_Result> AcFinancialYearSelect(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcFinancialYearSelect_Result>("AcFinancialYearSelect", branchIDParameter);
        }
    
        public virtual ObjectResult<SP_GetAllClosedJobsDetails_Result> SP_GetAllClosedJobsDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllClosedJobsDetails_Result>("SP_GetAllClosedJobsDetails");
        }
    
        public virtual int SP_UpdateCargoContainerBillByJobID(Nullable<int> jobID, Nullable<int> userID, Nullable<int> acFinnancialYearId)
        {
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var acFinnancialYearIdParameter = acFinnancialYearId.HasValue ?
                new ObjectParameter("AcFinnancialYearId", acFinnancialYearId) :
                new ObjectParameter("AcFinnancialYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateCargoContainerBillByJobID", jobIDParameter, userIDParameter, acFinnancialYearIdParameter);
        }
    
        public virtual ObjectResult<Report_Ledger_Result> Report_Ledger(Nullable<int> acHeadID, Nullable<int> acCompanyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> fYearID)
        {
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_Ledger_Result>("Report_Ledger", acHeadIDParameter, acCompanyIDParameter, fromDateParameter, toDateParameter, fYearIDParameter);
        }

        public virtual int SP_InsertJob(string jobCode, Nullable<int> jobTypeID, Nullable<System.DateTime> jobDate, Nullable<int> consignerID, Nullable<int> consigneeID, Nullable<int> invoiceToID, Nullable<int> employeeID, Nullable<int> shipperID, string iPTNo, string refNo, string billOfEnquiry, Nullable<System.DateTime> bLDate, string deliveryOrderNo, string bLStatus1, string cLFValue, Nullable<decimal> depositAmount, Nullable<System.DateTime> depositDate, string receiptNo, Nullable<System.DateTime> refundDate, Nullable<decimal> refundAmount, Nullable<int> vesselID, string voyageNo, string freight, Nullable<System.DateTime> sailingDate, Nullable<System.DateTime> arrivalDate, string mBL, string hBL, Nullable<int> loadPortID, Nullable<int> destinationPortID, Nullable<int> deliveryPlaceID, Nullable<int> receiptPlaceID, Nullable<int> countryofOriginID, Nullable<int> transporterID, Nullable<System.DateTime> collectionDate, string deliveryInstructions, string truckRegNo, string driverDetails, string remarks, string rotationNo, Nullable<int> carrierID, string collectionPoint, string deliveryNote, string deliveryPoint, string collectionInstructions, Nullable<int> invoiceNo, Nullable<System.DateTime> invoiceDate, Nullable<int> mainJObID, Nullable<System.DateTime> deliveryDate, Nullable<System.DateTime> departingDate, string flight, string mAWB, string hAWB, string mRN, Nullable<System.DateTime> deliveryOrderDate,string shippingInstruction, ObjectParameter maxJObID)
        {
            var jobCodeParameter = jobCode != null ?
                new ObjectParameter("JobCode", jobCode) :
                new ObjectParameter("JobCode", typeof(string));

            var jobTypeIDParameter = jobTypeID.HasValue ?
                new ObjectParameter("JobTypeID", jobTypeID) :
                new ObjectParameter("JobTypeID", typeof(int));

            var jobDateParameter = jobDate.HasValue ?
                new ObjectParameter("JobDate", jobDate) :
                new ObjectParameter("JobDate", typeof(System.DateTime));

            var consignerIDParameter = consignerID.HasValue ?
                new ObjectParameter("ConsignerID", consignerID) :
                new ObjectParameter("ConsignerID", typeof(int));

            var consigneeIDParameter = consigneeID.HasValue ?
                new ObjectParameter("ConsigneeID", consigneeID) :
                new ObjectParameter("ConsigneeID", typeof(int));

            var invoiceToIDParameter = invoiceToID.HasValue ?
                new ObjectParameter("InvoiceToID", invoiceToID) :
                new ObjectParameter("InvoiceToID", typeof(int));

            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));

            var shipperIDParameter = shipperID.HasValue ?
                new ObjectParameter("ShipperID", shipperID) :
                new ObjectParameter("ShipperID", typeof(int));

            var iPTNoParameter = iPTNo != null ?
                new ObjectParameter("IPTNo", iPTNo) :
                new ObjectParameter("IPTNo", typeof(string));

            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));

            var billOfEnquiryParameter = billOfEnquiry != null ?
                new ObjectParameter("BillOfEnquiry", billOfEnquiry) :
                new ObjectParameter("BillOfEnquiry", typeof(string));

            var bLDateParameter = bLDate.HasValue ?
                new ObjectParameter("BLDate", bLDate) :
                new ObjectParameter("BLDate", typeof(System.DateTime));

            var deliveryOrderNoParameter = deliveryOrderNo != null ?
                new ObjectParameter("DeliveryOrderNo", deliveryOrderNo) :
                new ObjectParameter("DeliveryOrderNo", typeof(string));

            var bLStatus1Parameter = bLStatus1 != null ?
                new ObjectParameter("BLStatus1", bLStatus1) :
                new ObjectParameter("BLStatus1", typeof(string));

            var cLFValueParameter = cLFValue != null ?
                new ObjectParameter("CLFValue", cLFValue) :
                new ObjectParameter("CLFValue", typeof(string));

            var depositAmountParameter = depositAmount.HasValue ?
                new ObjectParameter("DepositAmount", depositAmount) :
                new ObjectParameter("DepositAmount", typeof(decimal));

            var depositDateParameter = depositDate.HasValue ?
                new ObjectParameter("DepositDate", depositDate) :
                new ObjectParameter("DepositDate", typeof(System.DateTime));

            var receiptNoParameter = receiptNo != null ?
                new ObjectParameter("ReceiptNo", receiptNo) :
                new ObjectParameter("ReceiptNo", typeof(string));

            var refundDateParameter = refundDate.HasValue ?
                new ObjectParameter("RefundDate", refundDate) :
                new ObjectParameter("RefundDate", typeof(System.DateTime));

            var refundAmountParameter = refundAmount.HasValue ?
                new ObjectParameter("RefundAmount", refundAmount) :
                new ObjectParameter("RefundAmount", typeof(decimal));

            var vesselIDParameter = vesselID.HasValue ?
                new ObjectParameter("VesselID", vesselID) :
                new ObjectParameter("VesselID", typeof(int));

            var voyageNoParameter = voyageNo != null ?
                new ObjectParameter("VoyageNo", voyageNo) :
                new ObjectParameter("VoyageNo", typeof(string));

            var freightParameter = freight != null ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(string));

            var sailingDateParameter = sailingDate.HasValue ?
                new ObjectParameter("SailingDate", sailingDate) :
                new ObjectParameter("SailingDate", typeof(System.DateTime));

            var arrivalDateParameter = arrivalDate.HasValue ?
                new ObjectParameter("ArrivalDate", arrivalDate) :
                new ObjectParameter("ArrivalDate", typeof(System.DateTime));

            var mBLParameter = mBL != null ?
                new ObjectParameter("MBL", mBL) :
                new ObjectParameter("MBL", typeof(string));

            var hBLParameter = hBL != null ?
                new ObjectParameter("HBL", hBL) :
                new ObjectParameter("HBL", typeof(string));

            var loadPortIDParameter = loadPortID.HasValue ?
                new ObjectParameter("LoadPortID", loadPortID) :
                new ObjectParameter("LoadPortID", typeof(int));

            var destinationPortIDParameter = destinationPortID.HasValue ?
                new ObjectParameter("DestinationPortID", destinationPortID) :
                new ObjectParameter("DestinationPortID", typeof(int));

            var deliveryPlaceIDParameter = deliveryPlaceID.HasValue ?
                new ObjectParameter("DeliveryPlaceID", deliveryPlaceID) :
                new ObjectParameter("DeliveryPlaceID", typeof(int));

            var receiptPlaceIDParameter = receiptPlaceID.HasValue ?
                new ObjectParameter("ReceiptPlaceID", receiptPlaceID) :
                new ObjectParameter("ReceiptPlaceID", typeof(int));

            var countryofOriginIDParameter = countryofOriginID.HasValue ?
                new ObjectParameter("CountryofOriginID", countryofOriginID) :
                new ObjectParameter("CountryofOriginID", typeof(int));

            var transporterIDParameter = transporterID.HasValue ?
                new ObjectParameter("TransporterID", transporterID) :
                new ObjectParameter("TransporterID", typeof(int));

            var collectionDateParameter = collectionDate.HasValue ?
                new ObjectParameter("CollectionDate", collectionDate) :
                new ObjectParameter("CollectionDate", typeof(System.DateTime));

            var deliveryInstructionsParameter = deliveryInstructions != null ?
                new ObjectParameter("DeliveryInstructions", deliveryInstructions) :
                new ObjectParameter("DeliveryInstructions", typeof(string));

            var truckRegNoParameter = truckRegNo != null ?
                new ObjectParameter("TruckRegNo", truckRegNo) :
                new ObjectParameter("TruckRegNo", typeof(string));

            var driverDetailsParameter = driverDetails != null ?
                new ObjectParameter("DriverDetails", driverDetails) :
                new ObjectParameter("DriverDetails", typeof(string));

            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));

            var rotationNoParameter = rotationNo != null ?
                new ObjectParameter("RotationNo", rotationNo) :
                new ObjectParameter("RotationNo", typeof(string));

            var carrierIDParameter = carrierID.HasValue ?
                new ObjectParameter("CarrierID", carrierID) :
                new ObjectParameter("CarrierID", typeof(int));

            var collectionPointParameter = collectionPoint != null ?
                new ObjectParameter("CollectionPoint", collectionPoint) :
                new ObjectParameter("CollectionPoint", typeof(string));

            var deliveryNoteParameter = deliveryNote != null ?
                new ObjectParameter("DeliveryNote", deliveryNote) :
                new ObjectParameter("DeliveryNote", typeof(string));

            var deliveryPointParameter = deliveryPoint != null ?
                new ObjectParameter("DeliveryPoint", deliveryPoint) :
                new ObjectParameter("DeliveryPoint", typeof(string));

            var collectionInstructionsParameter = collectionInstructions != null ?
                new ObjectParameter("CollectionInstructions", collectionInstructions) :
                new ObjectParameter("CollectionInstructions", typeof(string));

            var invoiceNoParameter = invoiceNo.HasValue ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(int));

            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));

            var mainJObIDParameter = mainJObID.HasValue ?
                new ObjectParameter("MainJObID", mainJObID) :
                new ObjectParameter("MainJObID", typeof(int));

            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));

            var departingDateParameter = departingDate.HasValue ?
                new ObjectParameter("DepartingDate", departingDate) :
                new ObjectParameter("DepartingDate", typeof(System.DateTime));

            var flightParameter = flight != null ?
                new ObjectParameter("Flight", flight) :
                new ObjectParameter("Flight", typeof(string));

            var mAWBParameter = mAWB != null ?
                new ObjectParameter("MAWB", mAWB) :
                new ObjectParameter("MAWB", typeof(string));

            var hAWBParameter = hAWB != null ?
                new ObjectParameter("HAWB", hAWB) :
                new ObjectParameter("HAWB", typeof(string));

            var mRNParameter = mRN != null ?
               new ObjectParameter("MRN", mRN) :
               new ObjectParameter("MRN", typeof(string));

            var deliveryOrderDateParameter = deliveryOrderDate != null ?
               new ObjectParameter("DeliveryOrderDate", deliveryOrderDate) :
               new ObjectParameter("DeliveryOrderDate", typeof(string));

            var shippingInstructionParameter = shippingInstruction != null ?
              new ObjectParameter("ShippingInstruction", shippingInstruction) :
              new ObjectParameter("ShippingInstruction", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertJob", jobCodeParameter, jobTypeIDParameter, jobDateParameter, consignerIDParameter, consigneeIDParameter, invoiceToIDParameter, employeeIDParameter, shipperIDParameter, iPTNoParameter, refNoParameter, billOfEnquiryParameter, bLDateParameter, deliveryOrderNoParameter, bLStatus1Parameter, cLFValueParameter, depositAmountParameter, depositDateParameter, receiptNoParameter, refundDateParameter, refundAmountParameter, vesselIDParameter, voyageNoParameter, freightParameter, sailingDateParameter, arrivalDateParameter, mBLParameter, hBLParameter, loadPortIDParameter, destinationPortIDParameter, deliveryPlaceIDParameter, receiptPlaceIDParameter, countryofOriginIDParameter, transporterIDParameter, collectionDateParameter, deliveryInstructionsParameter, truckRegNoParameter, driverDetailsParameter, remarksParameter, rotationNoParameter, carrierIDParameter, collectionPointParameter, deliveryNoteParameter, deliveryPointParameter, collectionInstructionsParameter, invoiceNoParameter, invoiceDateParameter, mainJObIDParameter, deliveryDateParameter, departingDateParameter, flightParameter, mAWBParameter, hAWBParameter, mRNParameter, deliveryOrderDateParameter, shippingInstructionParameter, maxJObID);
        }

        public virtual ObjectResult<proJobCostFull_Result> proJobCostFull(string fromdate, string todate, string fYearFrom)
        {
            var fromdateParameter = fromdate != null ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(string));
    
            var todateParameter = todate != null ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(string));
    
            var fYearFromParameter = fYearFrom != null ?
                new ObjectParameter("FYearFrom", fYearFrom) :
                new ObjectParameter("FYearFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proJobCostFull_Result>("proJobCostFull", fromdateParameter, todateParameter, fYearFromParameter);
        }
    
        public virtual ObjectResult<SalesAndCollectionRpt_Result> SalesAndCollectionRpt(Nullable<int> customerID, Nullable<System.DateTime> yearFrom, Nullable<System.DateTime> yearTo)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var yearFromParameter = yearFrom.HasValue ?
                new ObjectParameter("YearFrom", yearFrom) :
                new ObjectParameter("YearFrom", typeof(System.DateTime));
    
            var yearToParameter = yearTo.HasValue ?
                new ObjectParameter("YearTo", yearTo) :
                new ObjectParameter("YearTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesAndCollectionRpt_Result>("SalesAndCollectionRpt", customerIDParameter, yearFromParameter, yearToParameter);
        }
    
        public virtual int SP_InsertCharges(Nullable<int> InvoiceID,Nullable<int> jobID, Nullable<int> revenueTypeID, Nullable<int> provisionCurrencyID, Nullable<decimal> provisionExchangeRate, Nullable<decimal> provisionForeign, Nullable<decimal> provisionHome, Nullable<int> salesCurrencyID, Nullable<decimal> salesExchangeRate, Nullable<decimal> salesForeign, Nullable<decimal> salesHome, Nullable<decimal> cost, Nullable<int> supplierID, string revenueCode, Nullable<double> quantity, Nullable<int> unitID, Nullable<decimal> provisionRate, Nullable<decimal> salesRate, string amtInWords, string invoiceStatus, string costUpdationStatus, Nullable<int> userID, string description, Nullable<decimal> tax, Nullable<decimal> taxamount, Nullable<decimal> margin)
        {
            var invoiceIDParameter = InvoiceID.HasValue ?
              new ObjectParameter("InvoiceID", InvoiceID) :
              new ObjectParameter("InvoiceID", typeof(int));

            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            var revenueTypeIDParameter = revenueTypeID.HasValue ?
                new ObjectParameter("RevenueTypeID", revenueTypeID) :
                new ObjectParameter("RevenueTypeID", typeof(int));
    
            var provisionCurrencyIDParameter = provisionCurrencyID.HasValue ?
                new ObjectParameter("ProvisionCurrencyID", provisionCurrencyID) :
                new ObjectParameter("ProvisionCurrencyID", typeof(int));
    
            var provisionExchangeRateParameter = provisionExchangeRate.HasValue ?
                new ObjectParameter("ProvisionExchangeRate", provisionExchangeRate) :
                new ObjectParameter("ProvisionExchangeRate", typeof(decimal));
    
            var provisionForeignParameter = provisionForeign.HasValue ?
                new ObjectParameter("ProvisionForeign", provisionForeign) :
                new ObjectParameter("ProvisionForeign", typeof(decimal));
    
            var provisionHomeParameter = provisionHome.HasValue ?
                new ObjectParameter("ProvisionHome", provisionHome) :
                new ObjectParameter("ProvisionHome", typeof(decimal));
    
            var salesCurrencyIDParameter = salesCurrencyID.HasValue ?
                new ObjectParameter("SalesCurrencyID", salesCurrencyID) :
                new ObjectParameter("SalesCurrencyID", typeof(int));
    
            var salesExchangeRateParameter = salesExchangeRate.HasValue ?
                new ObjectParameter("SalesExchangeRate", salesExchangeRate) :
                new ObjectParameter("SalesExchangeRate", typeof(decimal));
    
            var salesForeignParameter = salesForeign.HasValue ?
                new ObjectParameter("SalesForeign", salesForeign) :
                new ObjectParameter("SalesForeign", typeof(decimal));
    
            var salesHomeParameter = salesHome.HasValue ?
                new ObjectParameter("SalesHome", salesHome) :
                new ObjectParameter("SalesHome", typeof(decimal));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var revenueCodeParameter = revenueCode != null ?
                new ObjectParameter("RevenueCode", revenueCode) :
                new ObjectParameter("RevenueCode", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var provisionRateParameter = provisionRate.HasValue ?
                new ObjectParameter("ProvisionRate", provisionRate) :
                new ObjectParameter("ProvisionRate", typeof(decimal));
    
            var salesRateParameter = salesRate.HasValue ?
                new ObjectParameter("SalesRate", salesRate) :
                new ObjectParameter("SalesRate", typeof(decimal));
    
            var amtInWordsParameter = amtInWords != null ?
                new ObjectParameter("AmtInWords", amtInWords) :
                new ObjectParameter("AmtInWords", typeof(string));
    
            var invoiceStatusParameter = invoiceStatus != null ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(string));
    
            var costUpdationStatusParameter = costUpdationStatus != null ?
                new ObjectParameter("CostUpdationStatus", costUpdationStatus) :
                new ObjectParameter("CostUpdationStatus", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));

            var taxParameter = tax.HasValue ?
              new ObjectParameter("Tax", tax) :
              new ObjectParameter("Tax", typeof(decimal));

            var taxamountParameter = taxamount.HasValue ?
             new ObjectParameter("TaxAmount", taxamount) :
             new ObjectParameter("TaxAmount", typeof(decimal));

            var marginParameter = margin.HasValue ?
            new ObjectParameter("Margin", margin) :
            new ObjectParameter("Margin", typeof(decimal));


            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertCharges", invoiceIDParameter,jobIDParameter, revenueTypeIDParameter, provisionCurrencyIDParameter, provisionExchangeRateParameter, provisionForeignParameter, provisionHomeParameter, salesCurrencyIDParameter, salesExchangeRateParameter, salesForeignParameter, salesHomeParameter, costParameter, supplierIDParameter, revenueCodeParameter, quantityParameter, unitIDParameter, provisionRateParameter, salesRateParameter, amtInWordsParameter, invoiceStatusParameter, costUpdationStatusParameter, userIDParameter, descriptionParameter, taxParameter, taxamountParameter, marginParameter);
        }
    
        public virtual ObjectResult<Report_TradingProfitAndLoss_Result> Report_TradingProfitAndLoss(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_TradingProfitAndLoss_Result>("Report_TradingProfitAndLoss", fromDateParameter, toDateParameter);
        }
    
        public virtual int ProCustomerStatement(Nullable<int> intCustomerID, string dteFromDate, string dteToDate)
        {
            var intCustomerIDParameter = intCustomerID.HasValue ?
                new ObjectParameter("intCustomerID", intCustomerID) :
                new ObjectParameter("intCustomerID", typeof(int));
    
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("DteFromDate", dteFromDate) :
                new ObjectParameter("DteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("DteToDate", dteToDate) :
                new ObjectParameter("DteToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProCustomerStatement", intCustomerIDParameter, dteFromDateParameter, dteToDateParameter);
        }
    
        public virtual ObjectResult<ProCustomerStatement1_Result> ProCustomerStatement1(Nullable<int> intCustomerID, string dteFromDate, string dteToDate)
        {
            var intCustomerIDParameter = intCustomerID.HasValue ?
                new ObjectParameter("intCustomerID", intCustomerID) :
                new ObjectParameter("intCustomerID", typeof(int));
    
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("DteFromDate", dteFromDate) :
                new ObjectParameter("DteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("DteToDate", dteToDate) :
                new ObjectParameter("DteToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProCustomerStatement1_Result>("ProCustomerStatement1", intCustomerIDParameter, dteFromDateParameter, dteToDateParameter);
        }
    
        public virtual int ProSupplierAging(string dteFromDate, string dteToDate, Nullable<int> supplierID)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("DteFromDate", dteFromDate) :
                new ObjectParameter("DteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("DteToDate", dteToDate) :
                new ObjectParameter("DteToDate", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProSupplierAging", dteFromDateParameter, dteToDateParameter, supplierIDParameter);
        }
    
        public virtual ObjectResult<ProCustomerAgingDatewise_Result> ProCustomerAgingDatewise(string dteFromDate, string dteToDate, Nullable<int> customerID)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("DteFromDate", dteFromDate) :
                new ObjectParameter("DteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("DteToDate", dteToDate) :
                new ObjectParameter("DteToDate", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProCustomerAgingDatewise_Result>("ProCustomerAgingDatewise", dteFromDateParameter, dteToDateParameter, customerIDParameter);
        }
    
        public virtual int ProCustomerAgingDatewise1(string dteFromDate, string dteToDate, Nullable<int> customerID)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("DteFromDate", dteFromDate) :
                new ObjectParameter("DteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("DteToDate", dteToDate) :
                new ObjectParameter("DteToDate", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProCustomerAgingDatewise1", dteFromDateParameter, dteToDateParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<ProCustomerLedger_Result> ProCustomerLedger(Nullable<int> intCustomerID, string dteFromDate, string dteToDate)
        {
            var intCustomerIDParameter = intCustomerID.HasValue ?
                new ObjectParameter("intCustomerID", intCustomerID) :
                new ObjectParameter("intCustomerID", typeof(int));
    
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("DteFromDate", dteFromDate) :
                new ObjectParameter("DteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("DteToDate", dteToDate) :
                new ObjectParameter("DteToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProCustomerLedger_Result>("ProCustomerLedger", intCustomerIDParameter, dteFromDateParameter, dteToDateParameter);
        }
    
        public virtual ObjectResult<ProCustomerLedger1_Result> ProCustomerLedger1(Nullable<int> intCustomerID, string dteFromDate, string dteToDate)
        {
            var intCustomerIDParameter = intCustomerID.HasValue ?
                new ObjectParameter("intCustomerID", intCustomerID) :
                new ObjectParameter("intCustomerID", typeof(int));
    
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("DteFromDate", dteFromDate) :
                new ObjectParameter("DteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("DteToDate", dteToDate) :
                new ObjectParameter("DteToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProCustomerLedger1_Result>("ProCustomerLedger1", intCustomerIDParameter, dteFromDateParameter, dteToDateParameter);
        }
    
        public virtual ObjectResult<ProSupplierLedger1_Result> ProSupplierLedger1(Nullable<int> intSupplierID, string dteFromDate, string dteToDate)
        {
            var intSupplierIDParameter = intSupplierID.HasValue ?
                new ObjectParameter("intSupplierID", intSupplierID) :
                new ObjectParameter("intSupplierID", typeof(int));
    
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("DteFromDate", dteFromDate) :
                new ObjectParameter("DteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("DteToDate", dteToDate) :
                new ObjectParameter("DteToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProSupplierLedger1_Result>("ProSupplierLedger1", intSupplierIDParameter, dteFromDateParameter, dteToDateParameter);
        }
    
        public virtual ObjectResult<ProSupplierAgingDatewise_Result> ProSupplierAgingDatewise(string dteFromDate, string dteToDate, Nullable<int> supplierID)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("DteFromDate", dteFromDate) :
                new ObjectParameter("DteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("DteToDate", dteToDate) :
                new ObjectParameter("DteToDate", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProSupplierAgingDatewise_Result>("ProSupplierAgingDatewise", dteFromDateParameter, dteToDateParameter, supplierIDParameter);
        }
    
        public virtual ObjectResult<proJobCostFullActualCost_Result> proJobCostFullActualCost(string fromdate, string todate, string fYearFrom)
        {
            var fromdateParameter = fromdate != null ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(string));
    
            var todateParameter = todate != null ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(string));
    
            var fYearFromParameter = fYearFrom != null ?
                new ObjectParameter("FYearFrom", fYearFrom) :
                new ObjectParameter("FYearFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proJobCostFullActualCost_Result>("proJobCostFullActualCost", fromdateParameter, todateParameter, fYearFromParameter);
        }
    
        public virtual ObjectResult<ProSupplierStatement_Result> ProSupplierStatement(string dteToDate, Nullable<int> intSupplierControlHeadID, Nullable<bool> blnPDc)
        {
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("DteToDate", dteToDate) :
                new ObjectParameter("DteToDate", typeof(string));
    
            var intSupplierControlHeadIDParameter = intSupplierControlHeadID.HasValue ?
                new ObjectParameter("intSupplierControlHeadID", intSupplierControlHeadID) :
                new ObjectParameter("intSupplierControlHeadID", typeof(int));
    
            var blnPDcParameter = blnPDc.HasValue ?
                new ObjectParameter("blnPDc", blnPDc) :
                new ObjectParameter("blnPDc", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProSupplierStatement_Result>("ProSupplierStatement", dteToDateParameter, intSupplierControlHeadIDParameter, blnPDcParameter);
        }
    
        public virtual ObjectResult<GetBankReconciliationOutStandings_Result> GetBankReconciliationOutStandings(Nullable<int> acHeadID, Nullable<System.DateTime> fYearFrom, Nullable<System.DateTime> fYearTo)
        {
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var fYearFromParameter = fYearFrom.HasValue ?
                new ObjectParameter("FYearFrom", fYearFrom) :
                new ObjectParameter("FYearFrom", typeof(System.DateTime));
    
            var fYearToParameter = fYearTo.HasValue ?
                new ObjectParameter("FYearTo", fYearTo) :
                new ObjectParameter("FYearTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankReconciliationOutStandings_Result>("GetBankReconciliationOutStandings", acHeadIDParameter, fYearFromParameter, fYearToParameter);
        }
    
        public virtual ObjectResult<Report_JobRemark_Result> Report_JobRemark(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_JobRemark_Result>("Report_JobRemark", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<proCollectionDetails_Result> proCollectionDetails(string fromdate, string todate, Nullable<int> customerID)
        {
            var fromdateParameter = fromdate != null ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(string));
    
            var todateParameter = todate != null ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proCollectionDetails_Result>("proCollectionDetails", fromdateParameter, todateParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<SP_GetEDIFile_Details_Result> SP_GetEDIFile_Details(string rotationNo)
        {
            var rotationNoParameter = rotationNo != null ?
                new ObjectParameter("rotationNo", rotationNo) :
                new ObjectParameter("rotationNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetEDIFile_Details_Result>("SP_GetEDIFile_Details", rotationNoParameter);
        }
    
        public virtual ObjectResult<AcJournalDetailSelectByAcJournalID_Result> AcJournalDetailSelectByAcJournalID(Nullable<int> acJournalID, string paymentType)
        {
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcJournalDetailSelectByAcJournalID_Result>("AcJournalDetailSelectByAcJournalID", acJournalIDParameter, paymentTypeParameter);
        }
    
        public virtual ObjectResult<ProSupplierOutstanding_Result> ProSupplierOutstanding(string dteToDate, Nullable<int> intSupplierControlHeadID, Nullable<bool> blnPDc)
        {
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("DteToDate", dteToDate) :
                new ObjectParameter("DteToDate", typeof(string));
    
            var intSupplierControlHeadIDParameter = intSupplierControlHeadID.HasValue ?
                new ObjectParameter("intSupplierControlHeadID", intSupplierControlHeadID) :
                new ObjectParameter("intSupplierControlHeadID", typeof(int));
    
            var blnPDcParameter = blnPDc.HasValue ?
                new ObjectParameter("blnPDc", blnPDc) :
                new ObjectParameter("blnPDc", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProSupplierOutstanding_Result>("ProSupplierOutstanding", dteToDateParameter, intSupplierControlHeadIDParameter, blnPDcParameter);
        }
    
        public virtual ObjectResult<SP_GetAllCostUpdation_Result> SP_GetAllCostUpdation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllCostUpdation_Result>("SP_GetAllCostUpdation");
        }
    
        public virtual int SP_InsertJournalEntryForCostUpdation(Nullable<int> costUpdationID, Nullable<int> acFinnancialYearId)
        {
            var costUpdationIDParameter = costUpdationID.HasValue ?
                new ObjectParameter("CostUpdationID", costUpdationID) :
                new ObjectParameter("CostUpdationID", typeof(int));
    
            var acFinnancialYearIdParameter = acFinnancialYearId.HasValue ?
                new ObjectParameter("AcFinnancialYearId", acFinnancialYearId) :
                new ObjectParameter("AcFinnancialYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertJournalEntryForCostUpdation", costUpdationIDParameter, acFinnancialYearIdParameter);
        }
    
        public virtual int SP_InsertJournalEntryForJobInvoice(Nullable<int> jobID, Nullable<int> acFinnancialYearId)
        {
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            var acFinnancialYearIdParameter = acFinnancialYearId.HasValue ?
                new ObjectParameter("AcFinnancialYearId", acFinnancialYearId) :
                new ObjectParameter("AcFinnancialYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertJournalEntryForJobInvoice", jobIDParameter, acFinnancialYearIdParameter);
        }
    
        public virtual int SP_InsertJournalEntryForRecPay_SupplierPayment(Nullable<int> recPayID, Nullable<int> acFinnancialYearId)
        {
            var recPayIDParameter = recPayID.HasValue ?
                new ObjectParameter("RecPayID", recPayID) :
                new ObjectParameter("RecPayID", typeof(int));
    
            var acFinnancialYearIdParameter = acFinnancialYearId.HasValue ?
                new ObjectParameter("AcFinnancialYearId", acFinnancialYearId) :
                new ObjectParameter("AcFinnancialYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertJournalEntryForRecPay_SupplierPayment", recPayIDParameter, acFinnancialYearIdParameter);
        }
    
        public virtual int SP_InsertJournalEntryForJob(Nullable<int> jobID, Nullable<int> acFinnancialYearId)
        {
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            var acFinnancialYearIdParameter = acFinnancialYearId.HasValue ?
                new ObjectParameter("AcFinnancialYearId", acFinnancialYearId) :
                new ObjectParameter("AcFinnancialYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertJournalEntryForJob", jobIDParameter, acFinnancialYearIdParameter);
        }
    
        public virtual ObjectResult<SP_GetAllJobsDetailsByDate_Result> SP_GetAllJobsDetailsByDate(Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate)
        {
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("fdate", fdate) :
                new ObjectParameter("fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("tdate", tdate) :
                new ObjectParameter("tdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllJobsDetailsByDate_Result>("SP_GetAllJobsDetailsByDate", fdateParameter, tdateParameter);
        }
    
        public virtual ObjectResult<SP_GetChargesbyJobIDandUser_Result> SP_GetChargesbyJobIDandUser(Nullable<int> jobId, Nullable<int> userID)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetChargesbyJobIDandUser_Result>("SP_GetChargesbyJobIDandUser", jobIdParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SupStatement_Result> SupStatement()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupStatement_Result>("SupStatement");
        }
    
        public virtual ObjectResult<CustStatement_Result> CustStatement()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustStatement_Result>("CustStatement");
        }
    
        public virtual ObjectResult<CustOutstanding_Result> CustOutstanding(Nullable<int> custID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustOutstanding_Result>("CustOutstanding", custIDParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<ProSupplierLedger_Result> ProSupplierLedger(Nullable<int> intSupplierID, string dteFromDate, string dteToDate)
        {
            var intSupplierIDParameter = intSupplierID.HasValue ?
                new ObjectParameter("intSupplierID", intSupplierID) :
                new ObjectParameter("intSupplierID", typeof(int));
    
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("DteFromDate", dteFromDate) :
                new ObjectParameter("DteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("DteToDate", dteToDate) :
                new ObjectParameter("DteToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProSupplierLedger_Result>("ProSupplierLedger", intSupplierIDParameter, dteFromDateParameter, dteToDateParameter);
        }
    
        public virtual ObjectResult<SP_GetJobTruckConsignmentNoteReport_Result> SP_GetJobTruckConsignmentNoteReport(Nullable<int> jobID)
        {
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetJobTruckConsignmentNoteReport_Result>("SP_GetJobTruckConsignmentNoteReport", jobIDParameter);
        }
    
        public virtual ObjectResult<SP_GetAllInvoiceChargesbySupplier_Result> SP_GetAllInvoiceChargesbySupplier(Nullable<int> supplierID, string jobID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var jobIDParameter = jobID != null ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllInvoiceChargesbySupplier_Result>("SP_GetAllInvoiceChargesbySupplier", supplierIDParameter, jobIDParameter);
        }
    
        public virtual ObjectResult<SP_GetJobGenerationByJobID_Result> SP_GetJobGenerationByJobID(Nullable<int> jobID)
        {
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetJobGenerationByJobID_Result>("SP_GetJobGenerationByJobID", jobIDParameter);
        }
    
        public virtual ObjectResult<GETLOCALCostForDashboard_Result> GETLOCALCostForDashboard(Nullable<int> financialYearId)
        {
            var financialYearIdParameter = financialYearId.HasValue ?
                new ObjectParameter("FinancialYearId", financialYearId) :
                new ObjectParameter("FinancialYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETLOCALCostForDashboard_Result>("GETLOCALCostForDashboard", financialYearIdParameter);
        }
    
        public virtual ObjectResult<SPGetAllLocalCurrencyCostUpdation_Result> SPGetAllLocalCurrencyCostUpdation(Nullable<int> acFinancialYearID)
        {
            var acFinancialYearIDParameter = acFinancialYearID.HasValue ?
                new ObjectParameter("AcFinancialYearID", acFinancialYearID) :
                new ObjectParameter("AcFinancialYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetAllLocalCurrencyCostUpdation_Result>("SPGetAllLocalCurrencyCostUpdation", acFinancialYearIDParameter);
        }
    
        public virtual ObjectResult<SPGetAllLocalCurrencyCustRecievable_Result> SPGetAllLocalCurrencyCustRecievable(Nullable<int> acFinancialYearID)
        {
            var acFinancialYearIDParameter = acFinancialYearID.HasValue ?
                new ObjectParameter("AcFinancialYearID", acFinancialYearID) :
                new ObjectParameter("AcFinancialYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetAllLocalCurrencyCustRecievable_Result>("SPGetAllLocalCurrencyCustRecievable", acFinancialYearIDParameter);
        }
    
        public virtual ObjectResult<SPGetAllLocalCurrencyPayble_Result> SPGetAllLocalCurrencyPayble(Nullable<int> acFinancialYearID)
        {
            var acFinancialYearIDParameter = acFinancialYearID.HasValue ?
                new ObjectParameter("AcFinancialYearID", acFinancialYearID) :
                new ObjectParameter("AcFinancialYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetAllLocalCurrencyPayble_Result>("SPGetAllLocalCurrencyPayble", acFinancialYearIDParameter);
        }
    
        public virtual ObjectResult<SP_GetInvoiceReport_Result> SP_GetInvoiceReport(Nullable<int> jobID)
        {
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetInvoiceReport_Result>("SP_GetInvoiceReport", jobIDParameter);
        }
    
        public virtual ObjectResult<SP_GetCustomerInvoiceReport_Result> SP_GetCustomerInvoiceReport(Nullable<int> invoiceNo)
        {
            var invoiceNoParameter = invoiceNo.HasValue ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCustomerInvoiceReport_Result>("SP_GetCustomerInvoiceReport", invoiceNoParameter);
        }
    
        public virtual int SP_InsertJournalEntryForRecPay(Nullable<int> recPayID, Nullable<int> acFinnancialYearId)
        {
            var recPayIDParameter = recPayID.HasValue ?
                new ObjectParameter("RecPayID", recPayID) :
                new ObjectParameter("RecPayID", typeof(int));
    
            var acFinnancialYearIdParameter = acFinnancialYearId.HasValue ?
                new ObjectParameter("AcFinnancialYearId", acFinnancialYearId) :
                new ObjectParameter("AcFinnancialYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertJournalEntryForRecPay", recPayIDParameter, acFinnancialYearIdParameter);
        }
    
        public virtual ObjectResult<SP_GetAllRecieptsDetailsByDate_Result> SP_GetAllRecieptsDetailsByDate(string fromDate, string todate, Nullable<int> fyearId)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var todateParameter = todate != null ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(string));
    
            var fyearIdParameter = fyearId.HasValue ?
                new ObjectParameter("FyearId", fyearId) :
                new ObjectParameter("FyearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllRecieptsDetailsByDate_Result>("SP_GetAllRecieptsDetailsByDate", fromDateParameter, todateParameter, fyearIdParameter);
        }
    
        public virtual int SP_InsertCostUpdation1(Nullable<int> costUpdationID, Nullable<int> supplierID, Nullable<int> jobID, string invoice, Nullable<System.DateTime> invoiceDate, Nullable<int> acJournalID, Nullable<int> employeeID, string documentNo, string supplierPaymentStatus, Nullable<int> userID, Nullable<bool> @lock)
        {
            var costUpdationIDParameter = costUpdationID.HasValue ?
                new ObjectParameter("CostUpdationID", costUpdationID) :
                new ObjectParameter("CostUpdationID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            var invoiceParameter = invoice != null ?
                new ObjectParameter("Invoice", invoice) :
                new ObjectParameter("Invoice", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var supplierPaymentStatusParameter = supplierPaymentStatus != null ?
                new ObjectParameter("SupplierPaymentStatus", supplierPaymentStatus) :
                new ObjectParameter("SupplierPaymentStatus", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var lockParameter = @lock.HasValue ?
                new ObjectParameter("Lock", @lock) :
                new ObjectParameter("Lock", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertCostUpdation1", costUpdationIDParameter, supplierIDParameter, jobIDParameter, invoiceParameter, invoiceDateParameter, acJournalIDParameter, employeeIDParameter, documentNoParameter, supplierPaymentStatusParameter, userIDParameter, lockParameter);
        }
    
        public virtual ObjectResult<SP_GetAllPaymentsDetailsByDate_Result> SP_GetAllPaymentsDetailsByDate(string fromDate, string todate, Nullable<int> fyearId)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var todateParameter = todate != null ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(string));
    
            var fyearIdParameter = fyearId.HasValue ?
                new ObjectParameter("FyearId", fyearId) :
                new ObjectParameter("FyearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllPaymentsDetailsByDate_Result>("SP_GetAllPaymentsDetailsByDate", fromDateParameter, todateParameter, fyearIdParameter);
        }
    
        public virtual int SP_InsertCostUpdation(Nullable<int> costUpdationID, Nullable<int> supplierID, Nullable<int> jobID, string invoice, Nullable<System.DateTime> invoiceDate, Nullable<int> acJournalID, Nullable<int> employeeID, string documentNo, Nullable<int> prevCostupID, string supplierPaymentStatus, Nullable<int> userID, Nullable<bool> @lock,Nullable<DateTime> TransactionDate,Nullable<Decimal> InvoiceAmount)
        {
            var costUpdationIDParameter = costUpdationID.HasValue ?
                new ObjectParameter("CostUpdationID", costUpdationID) :
                new ObjectParameter("CostUpdationID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            var invoiceParameter = invoice != null ?
                new ObjectParameter("Invoice", invoice) :
                new ObjectParameter("Invoice", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var prevCostupIDParameter = prevCostupID.HasValue ?
                new ObjectParameter("PrevCostupID", prevCostupID) :
                new ObjectParameter("PrevCostupID", typeof(int));
    
            var supplierPaymentStatusParameter = supplierPaymentStatus != null ?
                new ObjectParameter("SupplierPaymentStatus", supplierPaymentStatus) :
                new ObjectParameter("SupplierPaymentStatus", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var lockParameter = @lock.HasValue ?
                new ObjectParameter("Lock", @lock) :
                new ObjectParameter("Lock", typeof(bool));

            var transactionDateParameter = TransactionDate.HasValue ?
               new ObjectParameter("TransactionDate", TransactionDate) :
               new ObjectParameter("TransactionDate", typeof(DateTime));

            var invoiceAmountParameter = InvoiceAmount.HasValue ?
              new ObjectParameter("InvoiceAmount", InvoiceAmount) :
              new ObjectParameter("InvoiceAmount", typeof(decimal));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertCostUpdation", costUpdationIDParameter, supplierIDParameter, jobIDParameter, invoiceParameter, invoiceDateParameter, acJournalIDParameter, employeeIDParameter, documentNoParameter, prevCostupIDParameter, supplierPaymentStatusParameter, userIDParameter, lockParameter, transactionDateParameter, invoiceAmountParameter);
        }
    
        public virtual int SP_InsertCostUpdationDetails(Nullable<int> costUpdationDetailID, Nullable<int> costUpdationID, Nullable<int> revenueTypeID, Nullable<int> provisionCurrencyID, Nullable<decimal> provisionExchangeRate, Nullable<decimal> provisionForeign, Nullable<decimal> provisionHome, Nullable<int> salesCurrencyID, Nullable<decimal> salesExchangeRate, Nullable<decimal> salesForeign, Nullable<decimal> salesHome, Nullable<decimal> variance, Nullable<int> supplierID, Nullable<int> jInvoiceID, Nullable<decimal> cost, Nullable<int> prevCostDetailID, Nullable<decimal> amountPaidTillDate, string paidOrNot, string supplierReference, string supplierPayStatus, Nullable<bool> @lock)
        {
            var costUpdationDetailIDParameter = costUpdationDetailID.HasValue ?
                new ObjectParameter("CostUpdationDetailID", costUpdationDetailID) :
                new ObjectParameter("CostUpdationDetailID", typeof(int));
    
            var costUpdationIDParameter = costUpdationID.HasValue ?
                new ObjectParameter("CostUpdationID", costUpdationID) :
                new ObjectParameter("CostUpdationID", typeof(int));
    
            var revenueTypeIDParameter = revenueTypeID.HasValue ?
                new ObjectParameter("RevenueTypeID", revenueTypeID) :
                new ObjectParameter("RevenueTypeID", typeof(int));
    
            var provisionCurrencyIDParameter = provisionCurrencyID.HasValue ?
                new ObjectParameter("ProvisionCurrencyID", provisionCurrencyID) :
                new ObjectParameter("ProvisionCurrencyID", typeof(int));
    
            var provisionExchangeRateParameter = provisionExchangeRate.HasValue ?
                new ObjectParameter("ProvisionExchangeRate", provisionExchangeRate) :
                new ObjectParameter("ProvisionExchangeRate", typeof(decimal));
    
            var provisionForeignParameter = provisionForeign.HasValue ?
                new ObjectParameter("ProvisionForeign", provisionForeign) :
                new ObjectParameter("ProvisionForeign", typeof(decimal));
    
            var provisionHomeParameter = provisionHome.HasValue ?
                new ObjectParameter("ProvisionHome", provisionHome) :
                new ObjectParameter("ProvisionHome", typeof(decimal));
    
            var salesCurrencyIDParameter = salesCurrencyID.HasValue ?
                new ObjectParameter("SalesCurrencyID", salesCurrencyID) :
                new ObjectParameter("SalesCurrencyID", typeof(int));
    
            var salesExchangeRateParameter = salesExchangeRate.HasValue ?
                new ObjectParameter("SalesExchangeRate", salesExchangeRate) :
                new ObjectParameter("SalesExchangeRate", typeof(decimal));
    
            var salesForeignParameter = salesForeign.HasValue ?
                new ObjectParameter("SalesForeign", salesForeign) :
                new ObjectParameter("SalesForeign", typeof(decimal));
    
            var salesHomeParameter = salesHome.HasValue ?
                new ObjectParameter("SalesHome", salesHome) :
                new ObjectParameter("SalesHome", typeof(decimal));
    
            var varianceParameter = variance.HasValue ?
                new ObjectParameter("Variance", variance) :
                new ObjectParameter("Variance", typeof(decimal));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var jInvoiceIDParameter = jInvoiceID.HasValue ?
                new ObjectParameter("JInvoiceID", jInvoiceID) :
                new ObjectParameter("JInvoiceID", typeof(int));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var prevCostDetailIDParameter = prevCostDetailID.HasValue ?
                new ObjectParameter("PrevCostDetailID", prevCostDetailID) :
                new ObjectParameter("PrevCostDetailID", typeof(int));
    
            var amountPaidTillDateParameter = amountPaidTillDate.HasValue ?
                new ObjectParameter("AmountPaidTillDate", amountPaidTillDate) :
                new ObjectParameter("AmountPaidTillDate", typeof(decimal));
    
            var paidOrNotParameter = paidOrNot != null ?
                new ObjectParameter("PaidOrNot", paidOrNot) :
                new ObjectParameter("PaidOrNot", typeof(string));
    
            var supplierReferenceParameter = supplierReference != null ?
                new ObjectParameter("SupplierReference", supplierReference) :
                new ObjectParameter("SupplierReference", typeof(string));
    
            var supplierPayStatusParameter = supplierPayStatus != null ?
                new ObjectParameter("SupplierPayStatus", supplierPayStatus) :
                new ObjectParameter("SupplierPayStatus", typeof(string));
    
            var lockParameter = @lock.HasValue ?
                new ObjectParameter("Lock", @lock) :
                new ObjectParameter("Lock", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertCostUpdationDetails", costUpdationDetailIDParameter, costUpdationIDParameter, revenueTypeIDParameter, provisionCurrencyIDParameter, provisionExchangeRateParameter, provisionForeignParameter, provisionHomeParameter, salesCurrencyIDParameter, salesExchangeRateParameter, salesForeignParameter, salesHomeParameter, varianceParameter, supplierIDParameter, jInvoiceIDParameter, costParameter, prevCostDetailIDParameter, amountPaidTillDateParameter, paidOrNotParameter, supplierReferenceParameter, supplierPayStatusParameter, lockParameter);
        }
    
        public virtual ObjectResult<sp_GetCustomerInvoice_Result> sp_GetCustomerInvoice(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> jObId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var jObIdParameter = jObId.HasValue ?
                new ObjectParameter("JObId", jObId) :
                new ObjectParameter("JObId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCustomerInvoice_Result>("sp_GetCustomerInvoice", fromDateParameter, toDateParameter, jObIdParameter);
        }
    
        public virtual ObjectResult<ReportCustomerReceipt_Result> ReportCustomerReceipt(Nullable<int> recPayID)
        {
            var recPayIDParameter = recPayID.HasValue ?
                new ObjectParameter("RecPayID", recPayID) :
                new ObjectParameter("RecPayID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportCustomerReceipt_Result>("ReportCustomerReceipt", recPayIDParameter);
        }
    
        public virtual ObjectResult<JobAnalysisReport_Result> JobAnalysisReport(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobAnalysisReport_Result>("JobAnalysisReport", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<SP_GetAllJobsDetailsForClosedJob_Result> SP_GetAllJobsDetailsForClosedJob()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllJobsDetailsForClosedJob_Result>("SP_GetAllJobsDetailsForClosedJob");
        }
    
        public virtual ObjectResult<GetChargesByJobIDForJobRegister_Result> GetChargesByJobIDForJobRegister(Nullable<int> jobID)
        {
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChargesByJobIDForJobRegister_Result>("GetChargesByJobIDForJobRegister", jobIDParameter);
        }
    
        public virtual ObjectResult<SP_JobRegisterReportPrintByJObID_Result> SP_JobRegisterReportPrintByJObID(Nullable<int> jobId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("jobId", jobId) :
                new ObjectParameter("jobId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_JobRegisterReportPrintByJObID_Result>("SP_JobRegisterReportPrintByJObID", jobIdParameter);
        }
    
        public virtual ObjectResult<GetJobDetailsBySupplieRID_Result> GetJobDetailsBySupplieRID(Nullable<int> supplierID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJobDetailsBySupplieRID_Result>("GetJobDetailsBySupplieRID", supplierIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SP_GetAllClosedJobsDetailsByDate_Result> SP_GetAllClosedJobsDetailsByDate(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, Nullable<int> fyearId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var fyearIdParameter = fyearId.HasValue ?
                new ObjectParameter("FyearId", fyearId) :
                new ObjectParameter("FyearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllClosedJobsDetailsByDate_Result>("SP_GetAllClosedJobsDetailsByDate", fromDateParameter, todateParameter, fyearIdParameter);
        }
    
        public virtual ObjectResult<YTDSummary_Result> YTDSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<YTDSummary_Result>("YTDSummary");
        }
    
        public virtual ObjectResult<SupOutstanding_Result> SupOutstanding(Nullable<int> supID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var supIDParameter = supID.HasValue ?
                new ObjectParameter("SupID", supID) :
                new ObjectParameter("SupID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupOutstanding_Result>("SupOutstanding", supIDParameter, fromdateParameter, todateParameter);
        }
    
        public virtual int SP_UpdateInvoiceNumber(Nullable<int> invoiceNo, Nullable<System.DateTime> invoiceDate, Nullable<int> jobID)
        {
            var invoiceNoParameter = invoiceNo.HasValue ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(int));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateInvoiceNumber", invoiceNoParameter, invoiceDateParameter, jobIDParameter);
        }
    
        public virtual int UpdateJournalEntryForJob(Nullable<int> jobID)
        {
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateJournalEntryForJob", jobIDParameter);
        }
    
        public virtual ObjectResult<SP_GetCustomerInvoiceDetailsForReciept_Result> SP_GetCustomerInvoiceDetailsForReciept(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCustomerInvoiceDetailsForReciept_Result>("SP_GetCustomerInvoiceDetailsForReciept", customerIDParameter);
        }
    
        public virtual ObjectResult<SP_GetSupplierCostDetailsForPayment_Result> SP_GetSupplierCostDetailsForPayment(Nullable<int> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSupplierCostDetailsForPayment_Result>("SP_GetSupplierCostDetailsForPayment", supplierIDParameter);
        }
    
        public virtual int SP_InsertRecPayDetailsForSupplier(Nullable<int> recPayID, Nullable<int> invoiceID, Nullable<decimal> amount, string remarks, string statusInvoice, Nullable<bool> statusAdvance, string statusReceipt, string invDate, string invNo, Nullable<int> currencyID, Nullable<int> invoiceStatus, Nullable<int> JobID)
        {
            var recPayIDParameter = recPayID.HasValue ?
                new ObjectParameter("RecPayID", recPayID) :
                new ObjectParameter("RecPayID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var statusInvoiceParameter = statusInvoice != null ?
                new ObjectParameter("StatusInvoice", statusInvoice) :
                new ObjectParameter("StatusInvoice", typeof(string));
    
            var statusAdvanceParameter = statusAdvance.HasValue ?
                new ObjectParameter("StatusAdvance", statusAdvance) :
                new ObjectParameter("StatusAdvance", typeof(bool));
    
            var statusReceiptParameter = statusReceipt != null ?
                new ObjectParameter("statusReceipt", statusReceipt) :
                new ObjectParameter("statusReceipt", typeof(string));
    
            var invDateParameter = invDate != null ?
                new ObjectParameter("InvDate", invDate) :
                new ObjectParameter("InvDate", typeof(string));
    
            var invNoParameter = invNo != null ?
                new ObjectParameter("InvNo", invNo) :
                new ObjectParameter("InvNo", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var invoiceStatusParameter = invoiceStatus.HasValue ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(int));

            var jobIDStatusParameter = JobID.HasValue ?
             new ObjectParameter("JobID", JobID) :
             new ObjectParameter("JobID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertRecPayDetailsForSupplier", recPayIDParameter, invoiceIDParameter, amountParameter, remarksParameter, statusInvoiceParameter, statusAdvanceParameter, statusReceiptParameter, invDateParameter, invNoParameter, currencyIDParameter, invoiceStatusParameter, jobIDStatusParameter);
        }
    
        public virtual int SP_InsertRecPayDetailsForCustomer1(Nullable<int> recPayID, Nullable<int> invoiceID, Nullable<int> jInvoiceID, Nullable<decimal> amount, string remarks, string statusInvoice, Nullable<bool> statusAdvance, string statusReceipt, string invDate, string invNo, Nullable<int> currencyID, Nullable<int> invoiceStatus)
        {
            var recPayIDParameter = recPayID.HasValue ?
                new ObjectParameter("RecPayID", recPayID) :
                new ObjectParameter("RecPayID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var jInvoiceIDParameter = jInvoiceID.HasValue ?
                new ObjectParameter("JInvoiceID", jInvoiceID) :
                new ObjectParameter("JInvoiceID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var statusInvoiceParameter = statusInvoice != null ?
                new ObjectParameter("StatusInvoice", statusInvoice) :
                new ObjectParameter("StatusInvoice", typeof(string));
    
            var statusAdvanceParameter = statusAdvance.HasValue ?
                new ObjectParameter("StatusAdvance", statusAdvance) :
                new ObjectParameter("StatusAdvance", typeof(bool));
    
            var statusReceiptParameter = statusReceipt != null ?
                new ObjectParameter("statusReceipt", statusReceipt) :
                new ObjectParameter("statusReceipt", typeof(string));
    
            var invDateParameter = invDate != null ?
                new ObjectParameter("InvDate", invDate) :
                new ObjectParameter("InvDate", typeof(string));
    
            var invNoParameter = invNo != null ?
                new ObjectParameter("InvNo", invNo) :
                new ObjectParameter("InvNo", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var invoiceStatusParameter = invoiceStatus.HasValue ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertRecPayDetailsForCustomer1", recPayIDParameter, invoiceIDParameter, jInvoiceIDParameter, amountParameter, remarksParameter, statusInvoiceParameter, statusAdvanceParameter, statusReceiptParameter, invDateParameter, invNoParameter, currencyIDParameter, invoiceStatusParameter);
        }
    
        public virtual int SP_InsertRecPayDetailsForCustomer(Nullable<int> recPayID, Nullable<int> invoiceID, Nullable<decimal> amount, string remarks, string statusInvoice, Nullable<bool> statusAdvance, string statusReceipt, string invDate, string invNo, Nullable<int> currencyID, Nullable<int> invoiceStatus, Nullable<int> JobID)
        {
            var recPayIDParameter = recPayID.HasValue ?
                new ObjectParameter("RecPayID", recPayID) :
                new ObjectParameter("RecPayID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var statusInvoiceParameter = statusInvoice != null ?
                new ObjectParameter("StatusInvoice", statusInvoice) :
                new ObjectParameter("StatusInvoice", typeof(string));
    
            var statusAdvanceParameter = statusAdvance.HasValue ?
                new ObjectParameter("StatusAdvance", statusAdvance) :
                new ObjectParameter("StatusAdvance", typeof(bool));
    
            var statusReceiptParameter = statusReceipt != null ?
                new ObjectParameter("statusReceipt", statusReceipt) :
                new ObjectParameter("statusReceipt", typeof(string));
    
            var invDateParameter = invDate != null ?
                new ObjectParameter("InvDate", invDate) :
                new ObjectParameter("InvDate", typeof(string));
    
            var invNoParameter = invNo != null ?
                new ObjectParameter("InvNo", invNo) :
                new ObjectParameter("InvNo", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var invoiceStatusParameter = invoiceStatus.HasValue ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(int));

            var jobIDStatusParameter = JobID.HasValue ?
              new ObjectParameter("JobID", JobID) :
              new ObjectParameter("JobID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertRecPayDetailsForCustomer", recPayIDParameter, invoiceIDParameter, amountParameter, remarksParameter, statusInvoiceParameter, statusAdvanceParameter, statusReceiptParameter, invDateParameter, invNoParameter, currencyIDParameter, invoiceStatusParameter, jobIDStatusParameter);
        }
    
        public virtual ObjectResult<JobRegisterReport_Result> JobRegisterReport(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> customerID, Nullable<int> jobID)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobRegisterReport_Result>("JobRegisterReport", fromdateParameter, todateParameter, customerIDParameter, jobIDParameter);
        }
    
        public virtual ObjectResult<JobWiseIncomeExpenditure_Result> JobWiseIncomeExpenditure(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobWiseIncomeExpenditure_Result>("JobWiseIncomeExpenditure", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<MonthlySalesRegister_Result> MonthlySalesRegister(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> customerID, Nullable<int> salesPersonID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MonthlySalesRegister_Result>("MonthlySalesRegister", fromDateParameter, toDateParameter, customerIDParameter, salesPersonIDParameter);
        }
    
        public virtual ObjectResult<SP_GetJOBCostReport_Result> SP_GetJOBCostReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, Nullable<int> customerID, Nullable<int> jobID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetJOBCostReport_Result>("SP_GetJOBCostReport", fromDateParameter, todateParameter, customerIDParameter, jobIDParameter);
        }
    
        public virtual ObjectResult<ContainerReport_Result> ContainerReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContainerReport_Result>("ContainerReport", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<AirshipmentReport_Result> AirshipmentReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AirshipmentReport_Result>("AirshipmentReport", fromDateParameter, toDateParameter);
        }

        public virtual ObjectResult<SP_GetAllItemUnit_Result> SP_GetAllItemUnit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllItemUnit_Result>("SP_GetAllItemUnit");
        }

       

        public virtual ObjectResult<SP_GetSalesInvoiceByID_Result> SP_GetSalesInvoiceByID(Nullable<int> salesInvoiceID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSalesInvoiceByID_Result>("SP_GetSalesInvoiceByID", salesInvoiceIDParameter);
        }

        public virtual ObjectResult<SP_GetPurchaseInvoiceByID_Result> SP_GetPurchaseInvoiceByID(Nullable<int> purchaseInvoiceID)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPurchaseInvoiceByID_Result>("SP_GetPurchaseInvoiceByID", purchaseInvoiceIDParameter);
        }
        public virtual ObjectResult<SP_GetAllProductServices_Result> SP_GetAllProductServices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllProductServices_Result>("SP_GetAllProductServices");
        }

        public virtual int AcAnalysisHeadAllocationInsert(Nullable<int> acJournalDetailID, Nullable<int> analysisHeadID, Nullable<decimal> amount)
        {
            var acJournalDetailIDParameter = acJournalDetailID.HasValue ?
                new ObjectParameter("AcJournalDetailID", acJournalDetailID) :
                new ObjectParameter("AcJournalDetailID", typeof(int));

            var analysisHeadIDParameter = analysisHeadID.HasValue ?
                new ObjectParameter("AnalysisHeadID", analysisHeadID) :
                new ObjectParameter("AnalysisHeadID", typeof(int));

            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcAnalysisHeadAllocationInsert", acJournalDetailIDParameter, analysisHeadIDParameter, amountParameter);
        }

        public virtual int AcAnalysisHeadAllocationDelete(string acAnalysisHeadAllocationIDs)
        {
            var acAnalysisHeadAllocationIDsParameter = acAnalysisHeadAllocationIDs != null ?
                new ObjectParameter("AcAnalysisHeadAllocationIDs", acAnalysisHeadAllocationIDs) :
                new ObjectParameter("AcAnalysisHeadAllocationIDs", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcAnalysisHeadAllocationDelete", acAnalysisHeadAllocationIDsParameter);
        }
        public virtual ObjectResult<GetPLOpeningAmount_Result> GetPLOpeningAmount(Nullable<int> acFinancialYearID, Nullable<int> acCompanyID)
        {
            var acFinancialYearIDParameter = acFinancialYearID.HasValue ?
                new ObjectParameter("AcFinancialYearID", acFinancialYearID) :
                new ObjectParameter("AcFinancialYearID", typeof(int));

            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPLOpeningAmount_Result>("GetPLOpeningAmount", acFinancialYearIDParameter, acCompanyIDParameter);
        }
    }
}

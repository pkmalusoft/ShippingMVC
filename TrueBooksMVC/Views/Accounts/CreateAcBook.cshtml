@model TrueBooksMVC.Models.AcBookVM
@{
    ViewBag.Title = "Cash and Bank Book";
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
}

<style>
    #details tr {
        height: 32px;
    }
    .taxCheck input {
        margin-right: 6px;
    }

    .checkboxdesign {
        display: flex;
        align-items: center;
    }
    #DeleteNewRow {
        color: #dd4b39;
    }
        #details tr:first-of-type ,#ExpAllocationTable tr:first-of-type{
            background: #35b8eb;
            color: #fff;
        }
    .taxCheck input{
        margin-right: 6px;
    }
    .headinglabel {
        font-family: Calibri;
        font-size: 16px;
        color: #2b2929 !important;
    }

    .jobform {
        background-color: #fff;
        box-shadow: 0 9px 23px rgba(0, 0, 0, 0.09), 0 5px 5px rgba(0, 0, 0, 0.06) !important;
        border-radius: 25px;
        margin-bottom: 27px;
        /*padding: 20px;
        width: 100%;
        margin: 0 auto;
        max-width: 900px;*/
        padding-top: 20px;
        padding-left: 20px;
        padding-right: 20px;
        width: 96%;
    }

    legend {
        color: #000 !important;
    }

    .Allocate {
        font-size: 20px;
    }

    #DeleteNewRow {
        margin: 2px;
        padding: 2px;
        cursor: pointer;
    }
</style>

<script type="text/javascript">
    $(document).ready(function () {
        var accounturl = '/Accounts/GetHeadsForCash';
                var startdate = '@Session["FyearFrom"].ToString()';
        var enddate = '@Session["FyearTo"].ToString()';

        var sd = new Date(startdate);
        var ed = new Date(enddate);
        
            $(function () {
                $("#transdate").datepicker({
                    dateFormat: 'dd-M-yy',
                    changeYear: true, changeMonth: true,
                    minDate: sd,
                    maxDate: ed,
                });
            });

            $(function () {
                $("#chequedate").datepicker({
                    dateFormat: 'dd-M-yy',
                    changeYear: true, changeMonth: true,
                    minDate: sd,
                    maxDate: ed,
                });
        });
        
        $("#ReceivedFrom").keydown(function (event) {
            if (event.keyCode == 9) {
                if ($("#ReceivedFrom").val().length == 0) {
                    event.preventDefault();
                    $("#btnsave").focus();
                }
            }
        });
        //$("#ReceivedFrom").keydown(function (e) {

        //    if (e.which == 8 || e.which == 46) {
        //        $('#SelectedReceivedFrom').val(0)
        //        //Keypressfunc(Receivedfromval, e.which);
        //    }

        //});
        //$("#ReceivedFrom").keydown(function (e,ui,data) {
        //    console.log(e.which);
        //    if (e.which === 38 || e.which == 40) {
        //        debugger;
        //        $('#SelectedReceivedFrom').val();
        //    }
        //    //if (e.which === 32 || e.which == 46 || e.which == 8) {
        //    //    $('#SelectedReceivedFrom').val(0);
        //    //} else if (e.which === 38 || e.which == 40) {
        //    //    return true;
        //    //    $('#SelectedReceivedFrom').val();
        //    //}
        //    var selectedId = $('#SelectedReceivedFrom').val();

        //    //if (selectedId == 0 || selectedId == null) {
        //    //    if (e.which === 9) {
        //    //        e.preventDefault();
        //    //        $("#btnsave").focus();
        //    //    }
        //    //}

        //});
        $("#chequedate").val(GetCurrentDate())
        $("#transdate").val(GetCurrentDate())
        function GetCurrentDate() {
            var m_names = new Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");
            var startdate = '@Session["FyearFrom"].ToString()';
            var d = new Date();
            var curr_date = d.getDate();
            var curr_month = d.getMonth() + 1;
            var curr_year = d.getFullYear();

            var reqdate = curr_date + "-" + curr_month + "-" + curr_year + ' ' + d.getHours() + ':' + d.getMinutes();
            //var reqdate = curr_date + "-" + curr_month + "-" + curr_year + ' ' + d.getHours() + ':' + d.getMinutes();
            return (curr_date + "-" + curr_month + "-" + curr_year);
        }
        $(":text").css({ "border-radius": "5px" });
        $("select").css({ "border-radius": "5px" });


        $("#bankname").prop('disabled', true);
        $("#chequeno").prop('disabled', true);
        $("#chequedate").prop('disabled', true);
        $("#partyname").prop('disabled', true);


        $("#TransactionType").val("CBR");

        $("#transtype").change(function () {
            var v = $("#transtype option:selected").val();


            if (v == "1") {
                $(".label1").html("Received From");
            }
            else {
                $(".label1").html("Paid To");
            }


            var rcbpaytype = $("#transtype option:selected").val();
            var rcbType = $("#paytype option:selected").val();

            if (rcbpaytype == "1" && rcbType == "1") {
                $("#TransactionType").val("CBR");
                $("#chequeno").prop('disabled', true);
                $("#chequedate").prop('disabled', true);
                $("#bankname").prop('disabled', true);

                $("#partyname").prop('disabled', true);

            }
            else if (rcbpaytype == "1" && rcbType > 1) {
                $("#TransactionType").val("BKR");
                $("#bankname").prop('disabled', false);

                $("#partyname").prop('disabled', false);
                $("#chequeno").prop('disabled', false);
                $("#chequedate").prop('disabled', false);
            }
            else if (rcbpaytype == "2" && rcbType == "1") {
                $("#TransactionType").val("CBP");
                $("#chequeno").prop('disabled', true);
                $("#chequedate").prop('disabled', true);
                $("#bankname").prop('disabled', true);

                $("#partyname").prop('disabled', true);
            }
            else if (rcbpaytype == "2" && rcbType > 1) {
                $("#TransactionType").val("BKP");
                $("#bankname").prop('disabled', true);

                $("#partyname").prop('disabled', true);
                $("#chequeno").prop('disabled', false);
                $("#chequedate").prop('disabled', false);
            }
        });



        $("#paytype").change(function () {
            var v = $("#paytype option:selected").val();
            if (v == "1") {
                accounturl = '/Accounts/GetHeadsForCash';
                //$.ajax({
                //    type: "POST",
                //    url: "/Accounts/GetHeadsForCash",
                //    datatype: "Json",
                //    success: function (data) {
                //        $("#AcHead").empty();

                //        $.each(data, function (index, value) {
                //            $('#AcHead').append('<option value="' + value.AcHeadID + '">' + value.AcHead + '</option>');
                //        });

                //    }
                //});

            }
            else {
                accounturl = '/Accounts/GetHeadsForBank';
                //$.ajax({
                //    type: "POST",
                //    url: "/Accounts/GetHeadsForBank",
                //    datatype: "Json",
                //    success: function (data) {
                //        $("#AcHead").empty();

                //        $.each(data, function (index, value) {
                //            $('#AcHead').append('<option value="' + value.AcHeadID + '">' + value.AcHead + '</option>');
                //        });

                //    }
                //});
            }


            var rcbpaytype = $("#transtype option:selected").val();
            var rcbType = $("#paytype option:selected").val();

            if (rcbpaytype == "1" && rcbType == "1") {
                $("#TransactionType").val("CBR");
                $("#chequeno").prop('disabled', true);
                $("#chequedate").prop('disabled', true);
                $("#bankname").prop('disabled', true);

                $("#partyname").prop('disabled', true);

            }
            else if (rcbpaytype == "1" && rcbType > 1) {
                $("#TransactionType").val("BKR");
                $("#bankname").prop('disabled', false);

                $("#partyname").prop('disabled', false);
                $("#chequeno").prop('disabled', false);
                $("#chequedate").prop('disabled', false);
            }
            else if (rcbpaytype == "2" && rcbType == "1") {
                $("#TransactionType").val("CBP");
                $("#chequeno").prop('disabled', true);
                $("#chequedate").prop('disabled', true);
                $("#bankname").prop('disabled', true);

                $("#partyname").prop('disabled', true);
            }
            else if (rcbpaytype == "2" && rcbType > 1) {
                $("#TransactionType").val("BKP");
                $("#bankname").prop('disabled', true);

                $("#partyname").prop('disabled', true);
                $("#chequeno").prop('disabled', false);
                $("#chequedate").prop('disabled', false);
            }
        });


        //$("#AcHead").change(function () {
        //    $.ajax({
        //        type: "POST",
        //        url: "/Accounts/GetBalance",
        //        datatype: "Json",
        //        data:{acheadid:$("#AcHead option:selected").val()},
        //        success: function (data) {

        //            $("#balance").html(data.d);
        //        }
        //    });
        //});


        //$("#btnAdd").click(function () {

        //    var str = "";
        //    var totalamt = 0;
        //    $("#details tr:last-child").after('<tr><td>' + $("#ReceivedFrom option:selected").val() + '</td><td>' + $("#ReceivedFrom option:selected").text() + '</td><td>' + $("#amount").val() + '</td><td>' + $("#remark1").val() + '</td></tr>');

        //    $("#details").find('tr:not(:first-child)').each(function (i, el) {
        //        var $tds = $(this).find('td'),
        //          acheadid = $tds.eq(0).text(),
        //           Amount = $tds.eq(2).text(),

        //        Remark = $tds.eq(3).text();
        //        str = str + acheadid + "~" + Amount + "~" + Remark + "~";
        //        totalamt = parseInt(totalamt) + parseInt(Amount);
        //    });

        //    $("#AcJournalDetail").val(str);
        //    $("#TotalAmt").val(totalamt);
        //    return false;
        //});


        $("#btnAdd").click(function () {

            if ($("#SelectedReceivedFrom").val() == "" || $("#SelectedReceivedFrom").val() == "0" || $("#ReceivedFrom").val() == "") {
                alert('Please Select "Received From"');
                $("#ReceivedFrom").focus();
                return false;
            }
            else if ($("#amount").val() == "") {
                alert("Please Enter The Amount");
                $("#amount").focus();
                return false;
            }
            else if (parseInt($("#amount").val()) == 0) {
                alert("Please Enter The Amount");
                $("#amount").focus();
                return false;
            }
            else {
                
                var str = "";
                var totalamt = 0;
                var i = $('#details > tbody > tr').length - 1;
                var s = 'name="AcExpAllocationVM';
                var ExpTableHtml = $('#ExpAllocationTable').clone().attr("id", i + "_ExpAllocationTable").css('display', 'none').addClass('CostAllocationDetail').wrap('<p>').parent().html();
                ExpTableHtml = ExpTableHtml.replace(/name="AcExpAllocationVM/g, 'name="AcJDetailVM[' + i + '].AcExpAllocationVM');
                var amounttaxcheck = '';
                if ($("#AmountIncludingTax").is(':checked')) {
                    amounttaxcheck = '<i class="fa fa-check"></i>';
                }
                var remark1 = $('#remark1').val();
                var objHtml = '<tr>' + '<td style="padding-left:10px">' + $("#ReceivedFrom").val() + '<input type="hidden" name="AcJDetailVM[' + i + '].IsDeleted" class="hdndeleted" /> <input type="hidden" class=JAcHead value=' + $("#SelectedReceivedFrom").val() + ' name="AcJDetailVM[' + i + '].AcHeadID"><input type="hidden" value=' + $("#ReceivedFrom").val() + ' name="AcJDetailVM[' + i + '].AcHead"></td>' + '<td style="padding-left:10px">' + amounttaxcheck + '<input type="hidden" value=' + $("#AmountIncludingTax").is(':checked') + ' name="AcJDetailVM[' + i + '].AmountIncludingTax"></td><td class=textright style="padding-right:10px">' + parseFloat($("#amount").val()).toFixed(2) + '<input type="hidden" class="JAcAmt" value=' + $("#amount").val() + ' name="AcJDetailVM[' + i + '].Amt"></td>' + '<td class=textright style="padding-right:10px">' + parseFloat($("#TaxPercent").val()).toFixed(2) + '<input type="hidden" class="JAcAmt" value=' + $("#TaxPercent").val() + ' name="AcJDetailVM[' + i + '].TaxPercent"></td>' + '<td class="textright" style="padding-right:10px">' + parseFloat($("#TaxAmount").val()).toFixed(2) + '<input type="hidden" class="JAcAmt" value=' + $("#TaxAmount").val() + ' name="AcJDetailVM[' + i + '].TaxAmount"></td>' + '<td style="padding-left:10px">' + $("#SupplierName").val() + '<input type="hidden" value=' + $("#SupplierID").val() + ' name="AcJDetailVM[' + i + '].SupplierID"></td>' + '<td style="padding-left:10px">' + remark1 + '<input type="hidden" value="' + remark1 + '" name="AcJDetailVM[' + i + '].Rem"></td>';
                objHtml = objHtml + '<td><img src="/Content/img/details_open.png" id="plus_minus" style="cursor: pointer;" class="open" />' + ExpTableHtml + '</td>';
                objHtml = objHtml + '<td><a href="javascript:void(0)" id="DeleteNewRow"><i class="fa fa-times"></i></a></td>';
                objHtml = objHtml + '</tr>';
                console.log(objHtml);
                $("#details").append(objHtml);
                $('#RowCount').val("0");
                $("#ExpAllocationTable").find("tr:gt(0)").remove();
                $("#ReceivedFrom").val("");
                $("#TaxPercent").val("");
                $("#TaxAmount").val("");
                $("#SelectedReceivedFrom").val("0");                
                $("#SupplierID").val(0);
                $("#SupplierName").val('');
                $("#amount").val('');
                $("#remark1").val('');
            }
            return false;
        });

        $('#details').on("click", "#plus_minus", function () {

            if ($(this).hasClass('open')) {
                $(this).parent().find('.CostAllocationDetail').show();
                $(this).attr('src', '/Content/img/details_close.png');
                $(this).removeClass('open');
                $(this).addClass('Close');
            } else {
                $(this).parent().find('.CostAllocationDetail').hide();
                $(this).attr('src', '/Content/img/details_open.png');
                $(this).addClass('open');
                $(this).removeClass('Close');
            }
        });

        $('#details').on("click", "#DeleteNewRow", function () {
            debugger;
            //$(this).parent().parent().remove();
            $(this).parent().parent().addClass('hide');
            var obj = $(this).parent().parent().find('.hdndeleted');
            $(obj).val(true);
        });

        $(".Allocate").on("click", function () {
            $('#popup').show();
            $('#popupbackground').show();
        });

        $("#AllocationClose").on("click", function () {
            $('#popup').hide();
            $('#popupbackground').hide();
        });

        $("#btn1").click(function () {

            //   alert("Hiii");
            //var acid=$(this).parent("td").parent("tr").find(".JAcHead").val();
            //var amt=$(this).parent("td").parent("tr").find(".JAcAmt").val();
            //var ajaxCallURL = '/Accounts/ExpAllocation';
            //$.ajax({
            //    type: "GET",
            //    url: ajaxCallURL,
            //    contentType: "application/json; charset=utf-8",
            //    datatype: "json",
            //    success: function (data) {
            //        $('#mycontent').html(data);
            //        //$('#myModal').modal(options);
            //        $('#myModal').modal('show');
            //    },
            //    error: function () {
            //        alert("Content load failed.");
            //    }
            //});


            $.ajax({
                url: "@Url.Action("ExpAllocation", "Accounts")",
                data: { amount: 500, acheadid: 325 },
                type: "GET",
                dataType: "json",
                success: function (data) {
                    //$("#res").html(data.view);
                    $(".modal-body").html(data.view);
                    $("#myModal").modal('show');

                },
                error: function () {
                    alert("Failed! Please try again.");
                }
            });
        });

        $("#btnsave").click(function () {
            var tlen = $('#details > tbody > tr').length - 1;
            if ($("#transdate").val() == "") {
                alert("Please Select Transaction Date");
                return false;

            }
            else if ($("#AcHead").val() == "") {
                alert("Please Select Account Head");
                return false;
            }
            else if (tlen == 0)
            {
                alert("Please add Transaction Details");
                return false;
            }
            else {
                return true;
            }
        });
           $("#AmountIncludingTax").click(function () {
            if ($("#AmountIncludingTax").is(':checked')) {
                if ($("#TaxPercent").val() > 0 && $("#amount").val() > 0) {
                    var amount = parseFloat($("#amount").val());
                    var taxpercent = parseFloat($("#TaxPercent").val()) / 100.00;
                     var taxamount = amount - (amount / (1 + taxpercent));
                    $("#TaxAmount").val(taxamount.toFixed(2));
                }
                else {
                    $("#TaxAmount").val(0);
                }
            }
            else {
                if ($("#TaxPercent").val() > 0 && $("#amount").val() > 0) {
                    var tamount = ($("#amount").val() * $("#TaxPercent").val()) / 100.00;
                    $("#TaxAmount").val(tamount.toFixed(2));
                }
                else {
                    $("#TaxAmount").val(0);
                }
            }
        });
        $("#amount").change(function () {
            if ($("#AmountIncludingTax").is(':checked')) {
                if ($("#TaxPercent").val() > 0 && $("#amount").val() > 0) {
                    var amount = parseFloat($("#amount").val());
                    var taxpercent = parseFloat($("#TaxPercent").val()) / 100.00;
                     var taxamount = amount - (amount / (1 + taxpercent));
                    $("#TaxAmount").val(taxamount.toFixed(2));
                }
                else {
                    $("#TaxAmount").val(0);
                }
            }
            else {
                if ($("#TaxPercent").val() > 0 && $("#amount").val() > 0) {
                    var tamount = ($("#amount").val() * $("#TaxPercent").val()) / 100.00;
                    $("#TaxAmount").val(tamount.toFixed(2));
                }
                else {
                    $("#TaxAmount").val(0);
                }
            }
        });

        $("#TaxPercent").change(function () {
            if ($("#AmountIncludingTax").is(':checked')) {
                if ($("#TaxPercent").val() > 0 && $("#amount").val() > 0) {
                    var amount = parseFloat($("#amount").val());
                    var taxpercent = parseFloat($("#TaxPercent").val()) / 100.00;
                     var taxamount = amount - (amount / (1 + taxpercent));
                    $("#TaxAmount").val(taxamount.toFixed(2));
                }
                else {
                    $("#TaxAmount").val(0);
                }
            }
            else {
                if ($("#TaxPercent").val() > 0 && $("#amount").val() > 0) {
                    var tamount = ($("#amount").val() * $("#TaxPercent").val()) / 100.00;
                    $("#TaxAmount").val(tamount.toFixed(2));
                }
                else {
                    $("#TaxAmount").val(0);
                }
            }
        });

        $("#AcHead").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: accounturl,
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.AcHead,
                                value: val.AcHead,
                                AcHeadID: val.AcHeadID
                            }
                        }))
                    }
                })
            }, minLength: 1,
            select: function (e, i) {
                e.preventDefault();
                $("#AcHead").val(i.item.label);
                $('#SelectedAcHead').val(i.item.AcHeadID);
            }
        });
        //sp - AnalysisHeadSelectAll
        $("#AcHeadAllocation").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/Accounts/AnalysisHeadSelectAll',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.AnalysisHead + ' - ' + val.AnalysisGroup,
                                value: val.AnalysisGroupID,
                                AnalysisGroupID: val.AnalysisHeadID
                            }
                        }))
                    }
                })
            }, minLength: 1,
            autoFocus: true,
            select: function (e, i) {
                e.preventDefault();
                $("#AcHeadAllocation").val(i.item.label);
                $('#SelectedAcHeadAllocation').val(i.item.AnalysisGroupID);
            }
        });
        $("#AcHeadAllocation").keydown(function (event) {
            if (event.keyCode == 9) {
                if ($("#AcHeadAllocation").val().length == 0) {
                    event.preventDefault();
                    $("#AllocationClose").focus();
                }
            }
        });

        $("#ReceivedFrom").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/Accounts/AccountHead',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.AcHead,
                                value: val.AcHead,
                                AcHeadID: val.AcHeadID,TaxPercent:val.TaxPercent
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus:true,
            select: function (e, i) {
                e.preventDefault();
                $("#ReceivedFrom").val(i.item.label);
                $('#SelectedReceivedFrom').val(i.item.AcHeadID);
                $('#TaxPercent').val(i.item.TaxPercent);

            },

        });

        $("#SupplierName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/Accounts/Supplier',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.SupplierInfo,
                                value: val.SupplierInfo,
                                SupplierID: val.SupplierID
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: true,
            select: function (e, i) {
                e.preventDefault();
                $("#SupplierName").val(i.item.label);
                $('#SupplierID').val(i.item.SupplierID);



            },

        });

    });
</script>


<section class="content-header">
    <h1 class="headingfont">Cash and Bank Book - Create</h1>
</section>


<section class="content ">

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        <fieldset>
            <div class="row no-margin">
                <div class="col-md-4">
                    <label class="headinglabel">Transaction No.</label>
                    <input type="text" name="TransactionNo" id="TransactionNo" readonly="readonly" class="form-control" />
                </div>
                <div class="col-md-4">
                    <label class="headinglabel">Transaction Date</label>
                    @Html.TextBoxFor(model => model.transdate, new { @class = "form-control", autocomplete = "off" })
                    @Html.ValidationMessageFor(model => model.transdate)
                </div>
                <div class="col-md-4">
                    <label class="headinglabel">Transaction Type</label>
                    @Html.DropDownListFor(model => model.transtype, ViewBag.transtypes as SelectList, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.transtype)
                    @Html.HiddenFor(Model => Model.TransactionType)
                </div>
            </div>
            <div class="row no-margin" style="padding-top:10px">
                <div class="col-md-4">
                    <label class="headinglabel">Payment Type</label>
                    @Html.DropDownListFor(model => model.paytype, ViewBag.paytypes as SelectList, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.paytype)
                    @Html.HiddenFor(model => model.paytype)
                </div>
                <div class="col-md-4">
                    <label class="headinglabel">Reference</label>
                    @Html.TextBoxFor(model => model.reference, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.reference)
                </div>
                <div class="col-md-4">
                    <label class="headinglabel">Cash/Bank Accounts</label>
                    <input type="text" id="AcHead" value="" class="form-control" autocomplete="off" />
                    @Html.HiddenFor(model => model.SelectedAcHead, new { Value = "0", id = "SelectedAcHead" })
                </div>
            </div>
            <div class="row no-margin" style="padding-top:10px">


                <div class="col-md-12">
                    <label class="headinglabel">Remarks/Narration</label>
                    @Html.TextAreaFor(model => model.remarks, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.remarks)
                    <span id="balance"></span>
                </div>

            </div>

            @*   <div class="row no-margin" style="padding-top:10px">
                    <div class="col-md-12">

                        <input type="submit" value="Save" class="btn btn-primary btnwidth" />

                        &nbsp;
                        <a href='@Url.Action("IndexAcBook", "Accounts", new { id = 0 })' class="btn btn-primary btnwidth" data-toggle="tooltip" data-placement="right" title="Click here">Cancel</a>

                    </div>
                </div>*@
        </fieldset>

        <div class="row no-margin">
            <h4 style="color:#0094ff;">Bank Details</h4>
            <hr style="margin-bottom:0px" />
        </div>
        <div class="row no-margin">
            <div class="col-md-3">
                <label class="headinglabel">Bank Name</label>
                @Html.TextBoxFor(model => model.bankname, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.bankname)
            </div>
            <div class="col-md-3">
                <label class="headinglabel">Cheque No</label>
                @Html.TextBoxFor(model => model.chequeno, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.chequeno)

            </div>
            <div class="col-md-3">
                <label class="headinglabel">Cheque Date</label>
                @Html.TextBoxFor(model => model.chequedate, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(model => model.chequedate)
            </div>
            <div class="col-md-3">
                <label class="headinglabel">Party Name</label>
                @Html.TextBoxFor(model => model.partyname, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.partyname)
            </div>
        </div>

        <div class="row no-margin">
            <h4 style="color:#0094ff">Add Details</h4>
            <hr style="margin-bottom:0px" />
        </div>
        <div class="row no-margin">
            <div class="col-md-2">
                <label class="headinglabel label1">Paid to</label>

                <input type="text" id="ReceivedFrom" name="ReceivedFrom" class="form-control" autocomplete="off" />
                @Html.HiddenFor(model => model.SelectedReceivedFrom, new { Value = "0", id = "SelectedReceivedFrom" })
            </div>
            <div class="col-md-2">
                <label class="headinglabel" style="width:33% !important">Amt</label>
                <div class="checkboxdesign taxCheck text-right" style="float:right; margin-right:2px">
                    @Html.CheckBox("AmountIncludingTax", new { @name = "AmountIncludingTax" })
                    <label class="headinglabel" style="font-weight:bold;color:#07a7e3!important;padding-left: 0!important;margin-top: 9px;font-size:13px">Including Tax</label>
                </div>
                @Html.TextBoxFor(model => model.amount, new { @class = "form-control textright txtNum" })
                @Html.ValidationMessageFor(model => model.amount)
            </div>
            <div class="col-md-1">
                <label class="headinglabel">Tax %</label>
                @Html.TextBoxFor(model => model.TaxPercent, new { @class = "form-control textright txtNum" })
                @Html.ValidationMessageFor(model => model.TaxPercent)
            </div>
            <div class="col-md-1">
                <label class="headinglabel">Tax Amt</label>
                @Html.TextBoxFor(model => model.TaxAmount, new { @class = "form-control textright txtNum", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.TaxAmount)
            </div>
            <div class="col-md-2">
                <label class="headinglabel">Supplier</label>
                <input type="text" id="SupplierName" name="SupplierName" class="form-control" autocomplete="off" />
                @Html.HiddenFor(model => model.SupplierId, new { Value = "0", id = "SupplierID" })
            </div>
            <div class="col-md-2">
                <label class="headinglabel">Reference</label>
                @Html.TextAreaFor(model => model.remark1, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.remark1)
            </div>
            <div class="col-md-1">
                <label class="headinglabel">Exp. Allocation</label>
                <a href="javascript:void(0)" class="Allocate"><i class="fa fa-bars"></i></a>
            </div>
            <div class="col-md-1">
                <label class="headinglabel">Action</label>
                <button type="button" style="height: 25px !important;margin-top:14px; vertical-align: middle;" onclick="ClearData()">-</button>&nbsp;&nbsp;
                <button type="button" style="height: 25px !important;margin-top:14px; vertical-align: middle;" index="1" id="btnAdd" class="addmore">+</button>
            </div>
        

            @*<div class="col-md-12 text-right" style="padding-right:62px;">
            <br />
            <input type="button" class="btn btn-primary" value="Add" id="btnAdd">
        </div>*@
        </div>
        <br />
        <div class="row no-margin" style="padding-top:10px">
            <table class="table table-bordered table-responsive" id="details" >
            <thead>
                <tr>
                    <th style="width:15%">AcHead</th>
                    <th style="width:2%">Tax</th>
                    <th style="width:10%">Amount</th>
                    <th style="width:5%">Tax%</th>
                    <th style="width:5%">Tax Amt.</th>
                    <th style="width:10%">Supplier</th>
                    <th style="width:15%">Remark/Ref No.</th>

                    <th style="width:15%">Exp. Allocation</th>
                    <th style="width:5%">Delete</th>
                </tr>
                </thead>
            </table>
            @Html.HiddenFor(model => model.AcJournalDetail)
            @Html.HiddenFor(model => model.TotalAmt)
        </div>
        <div class="row no-margin">
            <div class="col-md-10" id="res">

            </div>
        </div>
        <div class="row no-margin" style="padding-top:10px">
            <div class="" style="text-align:right;padding:10px">
                <input type="submit" value="Save" class="btn btn-primary btnwid" id="btnsave" /> &nbsp;&nbsp;<a href='@Url.Action("IndexAcBook", "Accounts", new { id = 0 })' class="btn btn-danger btnwid" data-toggle="tooltip" data-placement="right" title="Click here">Cancel</a>
            </div>
        </div>

        <div style="width:100%;height:3000px; color:black;opacity:0.6;z-index:5;display:none;background-color: black;position:absolute;top:0;left:0;" id="popupbackground">

        </div>
        <div class="col-md-6 col-md-offset-3" data-keyboard="false" style="position:absolute;top:500px;z-index:10;display:none;background-color:white;border-radius: 5px;padding:20px" id="popup">
            <div class="row">
                <div class="col-md-5">
                    <label class="headinglabel">Analysis Head</label>
                    <input type="text" id="AcHeadAllocation" value="" class="form-control" autocomplete="off" style="height:27px;" />
                    <input type="hidden" id="SelectedAcHeadAllocation" value="" class="form-control" autocomplete="off" />
                </div>
                <div class="col-md-3">
                    <label class="headinglabel">Amount</label>
                    <input type="text" class="text-right form-control txtNum" id="ExpAmount" value="0" />
                </div>
                <div class="col-md-3">
                    <button type="button" style="margin-top:30px; " index="1" id="AddExpAllocation" class="addmore small_btn btn btn-primary"><i style="font-size:21px" class="fa fa-plus"></i></button>
                </div>
                 <button type="button" class="btn btn-danger"style="height: 40px !important;position: absolute;top:0;width:40px;right:10px; border-radius: 50%;min-width: 40px!important;top:-11px;right:-10px;outline:" id="AllocationClose"><i style="font-size:21px" class="fa fa-times"></i></button>
            </div>
            <br />
            @*<div class="row">
                    <div class="col-md-12 text-right">
                        <input type="button" value="Add" class="btn btn-primary" style="margin:10px;" id="AddExpAllocation" />
                        <input type="button" value="Close" class="btn btn-danger" style="margin:10px;" id="AllocationClose" />
                    </div>
                </div>*@
            <div class="row">
                <div class="col-md-12">
                    <input type="hidden" value="0" id="RowCount" />
                    <table id="ExpAllocationTable" class="table table-bordered table-responsive">
                        <tr>
                            <td>Analysis Head</td>
                            <td>Amount</td>
                            <td>Delete</td>
                        </tr>
                    </table>
                </div>
            </div>
            <div class="pull-right">
                <button class="btn btn-secondary" style="background-color: #313030">Close</button>
            </div>
            <div class="clearfix"></div>

            <script type="text/javascript">
                $(document).ready(function () {

                    $('#AddExpAllocation').click(function () {
                        var Total = 0;
                        var MainTotal = 0;
                        var selectedval = $("#SelectedAcHeadAllocation").val();
                        debugger;
                        if (selectedval == 0) {
                            alert('Please select analysis head!');
                            return;
                        }
                        $('#ExpAllocationTable').find('.ExpAllocatedAmountDetails').each(function () {
                            debugger;
                            if (isNaN(parseFloat($(this).val())) === false) {
                                Total += parseFloat($(this).val());
                            }
                        });
                        if (isNaN(parseFloat($('#ExpAmount').val())) === false) {
                            Total += parseFloat($('#ExpAmount').val());
                        }
                        if (isNaN(parseFloat($('#amount').val())) === false) {
                            MainTotal += parseFloat($('#amount').val());
                        }
                        if (Total > MainTotal) {
                            alert('Amount cannot exceed total allocated amount');
                            return;
                        }
                        var RowCount = parseInt($('#RowCount').val());
                        var RowHtml = '<tr><td>' + $('#AcHeadAllocation').val() + '<input type="hidden" name="AcExpAllocationVM[' + RowCount + '].AcHead" value="' + $('#SelectedAcHeadAllocation').val() + '"/></td>';
                        RowHtml = RowHtml + '<td>' + $('#ExpAmount').val() + '<input type="hidden" id="' + RowCount + '_Amount" name="AcExpAllocationVM[' + RowCount + '].ExpAllocatedAmount" class="ExpAllocatedAmountDetails" value="' + $('#ExpAmount').val() + '"/></td>';
                        RowHtml = RowHtml + '<td><a href="javascript:void(0)" id="DeleteAllocationRow"><i class="fa fa-times"></i></a></td>';
                        RowHtml = RowHtml + '</tr>';
                        $('#ExpAllocationTable').append(RowHtml);
                        $('#RowCount').val(RowCount + 1);
                        $("#AcHeadAllocation").val('');
                        $("#SelectedAcHeadAllocation").val(0);
                        $("#ExpAmount").val(0);
                        $('#AcHeadAllocation').focus()
                    });

                    $('.txtNum').blur(function () {
                        if (isNaN(parseInt($(this).val()))) {
                            $(this).val('0.00');
                        } else {
                            var amt = parseFloat($(this).val());
                            $(this).val(amt.toFixed(2));
                        }
                    });

                    $('#ExpAllocationTable').on("click", "#DeleteAllocationRow", function () {
                        $(this).parent().parent().remove();
                    });

                    $('#details').on("click", "#DeleteAllocationRow", function () {
                        $(this).parent().parent().remove();
                    });
                });
                function ClearData() {
                    $("#SupplierID").val(0);
                    $("#SupplierName").val('');
                    $("#ReceivedFrom").val('');
                    $("#SelectedReceivedFrom").val(0);
                    $("#amount").val('');
                    $("#remark1").val('');
                    $("#AcHeadAllocation").val('');
                    $("#SelectedAcHeadAllocation").val(0);
                    $("#ExpAmount").val('');
                    $('#TaxPercent').val('');
                    $('#TaxAmount').val('');
                    $("#ExpAllocationTable").find("tr:gt(0)").remove();
                }
            </script>
            <div>

            </div>
        </div>
    }
</section>

@*Popup code*@

<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title" id="myModalLabel">Report</h4>
            </div>
            <div class="modal-body">

            </div>
            <div class="modal-footer">

                <button type="button" class="btn btn-primary" id="btnsubmitforreport">Submit</button>
            </div>
        </div>
    </div>
</div>

@* End Popup *@
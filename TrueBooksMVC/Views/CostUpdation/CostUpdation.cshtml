@model TrueBooksMVC.Models.costUpdationVM

@{
    ViewBag.Title = "CostUpdation";
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
    var isadd = true;
    string path = Request.Url.AbsolutePath.ToLower();

    if (Convert.ToInt32(Session["UserRoleID"]) > 1)
    {
        TrueBooksMVC.Models.SourceMastersModel obj = new TrueBooksMVC.Models.SourceMastersModel();
        isadd = obj.GetAddpermission(Convert.ToInt32(Session["UserRoleID"]), path);
    }
}

<style>
    .form_field {
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 9px 23px rgba(0, 0, 0, 0.09), 0 5px 5px rgba(0, 0, 0, 0.06) !important;
        padding: 16px;
        margin-top: 21px;
    }

    .form-control {
        font-size: 12px !important;
    }

    .headinglabel {
        font-family: Calibri;
        font-size: 17px;
        color: #1b1919 !important;
    }

    .btnwid {
        width: 100px;
        margin-right: 15px;
        font-size: 18px;
        border-radius: 10px;
    }

    .multiselect-container {
        width: 237px;
    }

    .fullTextTd {
        padding: 0px !important;
        border: 1px solid #615757 !important;
    }

        .fullTextTd input {
            width: 100%;
            line-height: 27px;
            margin: 0px;
            padding: 4px;
            border: 0px;
        }

    button.multiselect {
        width: 236px;
        text-align: right;
    }

    #DocumentNo {
        font-weight: bold;
    }

    .multiselect-selected-text {
        font-size: 12px;
    }

    .checkbox {
        font-size: 12px;
    }

    input.multiselect-search {
        height: 31px !important;
    }

    button.multiselect-clear-filter {
        height: 31px !important;
    }

    table.table tr:nth-of-type(1) td {
        font-weight: normal !important;
    }

    .multiselect-search {
        margin-top: 0px !important;
    }

    .fullwidthtd {
        padding: 0px !important;
        height: 100%;
        margin: 0px !important;
        vertical-align: middle;
    }

        .fullwidthtd input {
            height: 30px;
            line-height: 100%;
            border-radius: 0px !important;
            text-align: right;
            width: 100%;
        }

    .supplierReference {
        text-align: left !important;
    }
</style>
<!-- Include the plugin's CSS and JS: -->
<link href="/Content/Multiselect/bootstrap-multiselect.css" rel="stylesheet" />
<script src="/Content/Multiselect/bootstrap-multiselect.js"></script>

<script src="@Url.Content("~/Scripts/angular.js")"></script>
<script src="@Url.Content("~/MyJsFiles/CostUpdationJS.js")"></script>

<script type="text/javascript">
    var vSelectedJobID = '@Model.JobID';
    var vSupplierId = '@Model.SupplierID';
    var vCostUpdationId = '@Model.CostUpdationID';
    $(document).ready(function () {
        $('#MultiJobID').empty();
        //$("#MultiJobID").prop("disabled", true);
        $("#MultiJobID").css({ "display": "none" });
        $(":text").css({ "border-radius": "5px" });
        $("select").css({ "border-radius": "5px" });

        $('.txtNum').blur(function () {
            if (isNaN(parseInt($(this).val()))) {
                $(this).val('0.00');
            } else {
                var amt = parseFloat($(this).val());
                $(this).val(amt.toFixed(2));
            }
        });

        $('#tbl1').on('blur','.txtNum',function () {
            if (isNaN(parseInt($(this).val()))) {
                $(this).val('0.00');
            } else {
                var amt = parseFloat($(this).val());
                $(this).val(amt.toFixed(2));
            }
        });

        $("#SupplierID").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/AutoComplete/Supplier',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.SupplierName,
                                value: val.SupplierName,
                                SupplierID: val.SupplierID
                            }
                        }))
                    }
                })
            }, minLength: 1,
            select: function (e, i) {
                e.preventDefault();
                $("#SupplierID").val(i.item.label);
                $('#SelectedSupplierID').val(i.item.SupplierID);
                SelectedSupplierIDChanged();
            }
        });
        var SelectedSupplierID = $('#SelectedSupplierID').val();
        if ((isNaN(SelectedSupplierID) == false) && SelectedSupplierID != 0) {
            $.ajax({
                url: '/AutoComplete/SupplierById',
                datatype: "json",
                data: {
                    Id: SelectedSupplierID
                },
                success: function (data) {
                    $.each(data, function (index, element) {
                        $('#SupplierID').val(element.SupplierName);
                    });
                }
            });
        }

        function SelectedSupplierIDChanged() {
            showLoading();
            $.ajax({
                type: "POST",
                url: "/CostUpdation/BindJobCodeBySupplier",
                datatype: "Json",
                data: { supplierID: $('#SelectedSupplierID').val() },
                success: function (data) {
                    debugger;

                    $("#MultiJobID").empty();
                    if ($("#MultiJobID").length > 0) {
                        var x = $("#MultiJobID").parent("span").parent("div");
                        $("#MultiJobID").parent("span").remove();

                        $(x).append('<select id="MultiJobID" name="MultiJobID" multiple="multiple"></select>');
                    }

                    $.each(data, function (index, value) {
                        $('#MultiJobID').append('<option value="' + value.JobID + '">' + value.JobCode + '</option>');
                    });

                    $("#MultiJobID").prop("disabled", false);
                    $('#MultiJobID').multiselect({
                        enableClickableOptGroups: true,
                        enableCollapsibleOptGroups: true,
                        enableFiltering: true,
                        includeSelectAllOption: true,
                        dropRight:true
                    });

                    hideLoading();
                }
            });
        };

     /*   $(".amt").blur(function () {
            var parenttr = $(this).parent("td").parent("tr");

            var amt = parseInt($(parenttr).find("td").eq(5).text());
            var eamt = parseInt($(x).val());

            if (eamt > amt) {
                alert("The Amount Must Be Equal to Or Less Than Provision Amount");
                $(this).val(0);
                $(this).focus();
            }
        });*/

        $('.LoadedInvoiceAmount').each(function (i, obj) {
            if ($(obj).val() == '0' || $(obj).val() == '') {
                $(obj).val('0.00');
            }
        });

        $('#tbl1').on('blur','.LoadedInvoiceAmount', function () {
            var AmountPaidTillDate = parseFloat($(this).parent().parent().find('.AmountPaidTillDate').val());
            var InvoiceAmount = parseFloat($(this).val());
            var ProvisionHome = parseFloat($(this).parent().parent().find('.ProvisionHome').val());
            if ((AmountPaidTillDate + InvoiceAmount) > ProvisionHome) {
                $('#msg1').show();
                $('#msg1').text('Invoice Amount + Amount Paid Till Date cannot be greater than Provision Home.');
            } else {
                $('#msg1').hide();
            }
        });

        function ValidateTotal() {
            var TotalAmount = 0;
            $('#tbl1 tr').not(':first').each(function (i, obj) {
                var AmountPaidTillDate = parseFloat($(obj).find('.AmountPaidTillDate').val());
                var InvoiceAmount = parseFloat($(obj).find('.LoadedInvoiceAmount').val());
                var ProvisionHome = parseFloat($(obj).find('.ProvisionHome').val());

                if (isNaN(AmountPaidTillDate) == false && isNaN(InvoiceAmount) == false && isNaN(ProvisionHome) == false) {
                    if ((AmountPaidTillDate + InvoiceAmount) > ProvisionHome) {
                        $('#msg1').show();
                        $('#msg1').text('Invoice Amount + Amount Paid Till Date cannot be greater than Provision Home.');
                        return false;
                    } else {
                        $('#msg1').hide();
                    }
                }

                if (isNaN(AmountPaidTillDate) == false && isNaN(InvoiceAmount) == false) {
                    TotalAmount = TotalAmount + AmountPaidTillDate + InvoiceAmount;
                }
            });

            var TotalInvoiceAmount = parseFloat($('#InvoiceAmount').val());
            if (TotalAmount > TotalInvoiceAmount) {
                $('#msg1').show();
                $('#msg1').text('Sum of Invoice Amount cannot be greater than Total Invoice Amount');
                return false;
            } else {
                return true;
            }
        }

        $('#tbl1').on('blur','.LoadedInvoiceAmount',function () {
           var result = ValidateTotal();
        });

        $('form').submit(function (e) {
            debugger;
            var result = ValidateTotal();
            if (result == false) {
                e.preventDefault();
            }
        });

    });

    function BindCostUpdationDetailsGrid() {
        var countries = [];
        $.each($("#MultiJobID option:selected"), function () {
            countries.push($(this).val());
        });
        var jobidstring = countries.join(", ");

        $('#tbl1 tr:gt(0)').remove()

        $.ajax({
            type: "POST",
            url: "/CostUpdation/BindCostGrid",

            datatype: "Json",
            data: { ID: $('#SelectedSupplierID').val(), JobIDList: jobidstring },
            success: function (data) {
                for (var i = 0; i < data.length; i++) {
                    $('#tbl1').append('<tr>' +
                                               '<td>' + data[i].JobCode + ' <input id="" name="CostUpdationDetails[' + i + '].JobCode" value="' + data[i].JobCode + '" type="hidden"></td>' +
                                               '<td>' + data[i].RevenueType + '<input id="" name="CostUpdationDetails[' + i + '].RevenueTypeID" value="' + data[i].RevenueTypeID + '" type="hidden"></td>' +
                        '<td>' + data[i].CurrencyName + '<input id="" name="CostUpdationDetails[' + i + '].CurrencyName" value="' + data[i].CurrencyName + '" type="hidden"></td>' +
                        '<td class="text-right">' + parseFloat(data[i].ProvisionExchangeRate).toFixed(2) + '<input id="" name="CostUpdationDetails[' + i + '].ProvisionExchangeRate" value="' + data[i].ProvisionExchangeRate + '" type="hidden"></td>' +
                        '<td class="text-right">' + parseFloat(data[i].ProvisionForeign).toFixed(2) + '<input id="" name="CostUpdationDetails[' + i + '].ProvisionForeign" value="' + data[i].ProvisionForeign + '" type="hidden"></td>' +
                        '<td class="text-right">' + parseFloat(data[i].ProvisionHome).toFixed(2) + '<input id="" name="CostUpdationDetails[' + i + '].ProvisionHome" value="' + data[i].ProvisionHome + '" type="hidden" class="ProvisionHome"> <input  name="CostUpdationDetails[' + i + '].ProvisionCurrencyID" value="' + data[i].ProvisionCurrencyID + '" type="hidden" /></td>' +
                        '<td class="text-right">0.00 <input type="hidden" name="CostUpdationDetails[' + i + '].AmountPaidTillDate" value="0" class="AmountPaidTillDate" /></td>' +
                        '<td class="fullTextTd"><input type="text" id="" class="invamt txtNum textright LoadedInvoiceAmount" onBlur="f1(this)" name="CostUpdationDetails[' + i + '].InvoiceAmount" autocomplete="off" /> <input name="CostUpdationDetails[' + i + '].CostUpdationDetailID" type="hidden" value="0" /> <input  name="CostUpdationDetails[' + i + '].SalesCurrencyID" value="' + data[i].SalesCurrencyID + '" type="hidden" /> ' +
                                               '</td>' +
                                               '<td class="fullTextTd"><input type="text" id="" name="CostUpdationDetails[' + i + '].SupplierReference"></input><input name="CostUpdationDetails[' + i + '].SalesExchangeRate" value="' + data[i].SalesExchangeRate + '" type="hidden" /> <input  name="CostUpdationDetails[' + i + '].SalesForeign" value="' + data[i].SalesForeign + '" type="hidden"> <input  name="CostUpdationDetails[' + i + '].SalesHome" value="' + data[i].SalesHome + '" type="hidden" /><input  name="CostUpdationDetails[' + i + '].SupplierID" value="' + data[i].SupplierID + '" type="hidden"><input  name="CostUpdationDetails[' + i + '].JInvoiceID" value="' + data[i].InvoiceID + '" type="hidden"><input  name="CostUpdationDetails[' + i + '].Cost" value="' + data[i].Cost + '" type="hidden"> <input  name="CostUpdationDetails[' + i + '].InvoiceID" value="' + data[i].InvoiceID + '" type="hidden">' +
                                               '<input  name="CostUpdationDetails[' + i + '].JobID" value="' + data[i].JobID + '" type="hidden">' +

                                               '</td>' +
                                               '<tr>');
                }
            }
        });
    }

    function f1(x) {
        var parenttr = $(x).parent("td").parent("tr");

        var amt = parseInt($(parenttr).find("td").eq(5).text());
        var eamt = parseInt($(x).val());

        if (eamt > amt) {
            alert("The Amount Must Be Equal to Or Less Than Provision Amount");
            $(x).val(0);
            $(x).focus();
        }
        }

 
</script>
    <div ng-app="MyApp" ng-controller="MyCostUpdation">
        <div class="" dir="ltr" id="main" runat="server">
            @using (Html.BeginForm())
            {
                @Html.ValidationSummary(true)
                <section class="content-header">
                    <h1>Cost Updation<small></small></h1>
                </section>
                <!-- Main content -->
                <section class="content">
                    <div class="row back-to-list">
                        <div class="col-xs-3" style="padding-left: 30px">
                            <a href='@Url.Action("CostUpdationDetails", "CostUpdation", new { id = 0 })' class="btn btn-primary">Back to list</a>
                            @Html.HiddenFor(model => model.CostUpdationID)
                        </div>
                        <div class="col-xs-7">
                        </div>
                    </div>
                    <div class="form_field">
                        <div class="row no-margin form-layout" style="padding-top: 10px">
                            @if (Model.CostUpdationID <= 0)
                            {
                                <div class="col-xs-12 col-sm-3">
                                    <div class="form-title">
                                        <label class="headinglabel">Doc No</label>
                                    </div>
                                    <div class="form-field">
                                        @Html.TextBoxFor(model => model.DocumentNo, new { @Value = ViewBag.DocumentNos, @class = "form-control", required = "required", autocomplete = "off" })
                                        @Html.ValidationMessageFor(model => model.DocumentNo)

                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="col-xs-12 col-sm-3">
                                    <div class="form-title">
                                        <label class="headinglabel">Doc No</label>
                                    </div>
                                    <div class="form-field">
                                        @Html.TextBoxFor(model => model.DocumentNo, new { @readonly = "readonly", @class = "form-control", autocomplete = "off" })

                                    </div>
                                </div>
                            }
                            <div class="col-xs-12 col-sm-3">
                                <div class="form-title">
                                    <label class="headinglabel">Transaction Date</label>
                                </div>
                                <div class="form-field">
                                    @if (Model.CostUpdationID > 0)
                                    {
                                        @Html.TextBoxFor(m => m.TransactionDate, new { Value = Model.TransactionDate.HasValue ? Model.TransactionDate.Value.ToString("dd-MMM-yyyy") : "", id = "TransactionDate", @class = "form-control", autocomplete = "off" })
                                        @Html.ValidationMessageFor(model => model.TransactionDate)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(model => model.TransactionDate, new { @class = "form-control", required = "required", autocomplete = "off" })
                                        @Html.ValidationMessageFor(model => model.TransactionDate)
                                    }
                                </div>
                            </div>

                        </div>
                        <div class="row no-margin form-layout" style="padding-top: 10px">
                            @if (Model.CostUpdationID <= 0)
                            {
                                <div class="col-xs-12 col-sm-3">
                                    <div class="form-title">
                                        <label class="headinglabel">Supplier</label>
                                    </div>
                                    <div class="form-field">
                                        <input type="text" id="SupplierID" value="" class="form-control" />
                                        @Html.HiddenFor(model => model.SelectedSupplierID, new { Value = "0", id = "SelectedSupplierID" })

                                        @*  @Html.DropDownListFor(model => model.SupplierID, (SelectList)ViewBag.Suppliers, "select", new { ng_model = "SupplierID", @class = "form-control", required = "required" })
                                            @Html.DropDownListFor(model => model.JobID, (SelectList)ViewBag.AllJobCodes, "Select", new { ng_model = "JobID", ng_change = "BindSuppliers()", @class = "form-control", required = "required" })
                                            @Html.ValidationMessageFor(model => model.SupplierID)*@

                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="col-xs-12 col-sm-3">
                                    <div class="form-title">
                                        <label class="headinglabel">Supplier</label>
                                    </div>
                                    <div class="form-field">
                                        @Html.TextBoxFor(model => model.SupplierName, new { @class = "form-control", @readonly = "readonly" })
                                        @Html.HiddenFor(model => model.SelectedSupplierID, new { id = "SelectedSupplierID" })
                                    </div>
                                </div>
                            }
                            <div class="col-xs-12 col-sm-3">
                                <div class="form-title">
                                    <label class="headinglabel">Invoice Number</label>
                                </div>
                                <div class="form-field">
                                    @Html.TextBoxFor(model => model.InvoiceNo, new { @class = "form-control", autocomplete = "off" })
                                </div>
                            </div>
                            <div class="col-xs-12 col-sm-3">
                                <div class="form-title">
                                    <label class="headinglabel">Invoice Date</label>
                                </div>
                                <div class="form-field">
                                    @if (Model.CostUpdationID > 0)
                                    {
                                        @Html.TextBoxFor(m => m.InvoiceDate, new { Value = Model.InvoiceDate.Value.ToString("dd-MMM-yyyy"), id = "InvoiceDate", @class = "form-control", autocomplete = "off" })
                                        @Html.ValidationMessageFor(model => model.InvoiceDate)
                                        @Html.HiddenFor(model => model.AcJournalID)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(model => model.InvoiceDate, new { @class = "form-control", required = "required", autocomplete = "off" })
                                        @Html.ValidationMessageFor(model => model.InvoiceDate)
                                        @Html.HiddenFor(model => model.AcJournalID)
                                    }
                                </div>
                            </div>
                            <div class="col-xs-12 col-sm-3">
                                <div class="form-title">
                                    <label class="headinglabel">Invoice Amount</label>
                                </div>
                                <div class="form-field">
                                    @if (Model.CostUpdationID > 0)
                                    {
                                        @Html.TextBoxFor(m => m.InvoiceAmount, new { @class = "form-control txtNum textright", autocomplete = "off" })
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(model => model.InvoiceAmount, new { @class = "form-control txtNum textright", autocomplete = "off" })
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="row no-margin form-layout" style="padding-top: 10px">
                            <div class="col-xs-12 col-sm-3">
                                <div class="form-title">
                                    <label class="headinglabel">Employee</label>
                                </div>
                                <div class="form-field">
                                    @Html.DropDownListFor(model => model.EmployeeID, (SelectList)ViewBag.Employes, "Select", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.EmployeeID)
                                </div>
                            </div>
                            <div class="col-xs-12 col-sm-3">
                                <div class="form-title">
                                    <label class="headinglabel">Job No</label>
                                </div>
                                <div class="form-field">
                                    @if (Model.CostUpdationID <= 0)
                                    {
                                        <select id="MultiJobID" name="MultiJobID" multiple="multiple"></select>
                                        <input type="button" onclick="BindCostUpdationDetailsGrid()" value="Select" class="btn btn-primary" />
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(model => model.JobCode, new { @readonly = "readonly", @class = "form-control" })
                                        @Html.HiddenFor(model => model.JobID)
                                    }
                                </div>
                            </div>
                            <div class="col-xs-12 col-sm-6">
                                <p style="color:red;display:none;font-size: 15px;margin-top: 30px;" id="msg1">Invoice Amount + Amount Paid Till Date cannot be greater than Provision Home.</p>
                            </div>
                        </div>
                        <div class="row no-margin form-layout">
                            <div class="col-xs-12" style="padding-top: 10px">
                                <div class="data" style="padding-top: 10px;">
                                    <table border="1" class="table table-responsive tblbackground" style="width: 100%" id="tbl1">
                                        <tr style="font-weight: bold;background-color: #35b8eb;color: #fff;font-size: 16px;">
                                            <td>
                                                Job Code
                                            </td>
                                            <td>
                                                Revenue Type
                                            </td>
                                            <td>
                                                Currency Name
                                            </td>
                                            <td>
                                                Provision Exchange Rate
                                            </td>
                                            <td>
                                                Provision Foreign
                                            </td>
                                            <td>
                                                Provision Home
                                            </td>
                                            @if (Model.CostUpdationID >= 0)
                                            {
                                                <td>
                                                    Amount Paid Till Date
                                                </td>
                                            }
                                            <td>Invoice Amount</td>
                                            <td>Refference No</td>
                                        </tr>
                                        @if (Model.CostUpdationID > 0)
                                        {
                                            for (int i = 0; i < Model.CostUpdationDetails.Count; i++)
                                            {
                                                <tr>
                                                    <td>

                                                        @Model.CostUpdationDetails[i].JobCode
                                                        @Html.HiddenFor(model => model.CostUpdationDetails[i].JobID)

                                                    </td>
                                                    <td>

                                                        @Model.CostUpdationDetails[i].RevenueType
                                                        @Html.HiddenFor(item => @Model.CostUpdationDetails[i].RevenueTypeID)

                                                    </td>
                                                    <td>

                                                        @Model.CostUpdationDetails[i].CurrencyName
                                                        @Html.HiddenFor(item => @Model.CostUpdationDetails[i].ProvisionCurrencyID)

                                                    </td>
                                                    <td style="text-align:right">

                                                        @string.Format("{0:n2}", @Model.CostUpdationDetails[i].ProvisionExchangeRate)
                                                        @Html.HiddenFor(item => @Model.CostUpdationDetails[i].ProvisionExchangeRate)

                                                    </td>
                                                    <td style="text-align: right;">

                                                        @string.Format("{0:n2}", @Model.CostUpdationDetails[i].ProvisionForeign)
                                                        @Html.HiddenFor(item => @Model.CostUpdationDetails[i].ProvisionForeign)

                                                    </td>
                                                    <td style="text-align: right;">
                                                        <div class="data6">@string.Format("{0:n2}", @Model.CostUpdationDetails[i].ProvisionHome)</div>
                                                        @Html.HiddenFor(item => @Model.CostUpdationDetails[i].ProvisionHome, new { @class = "ProvisionHome" })
                                                        @Html.HiddenFor(item => @Model.CostUpdationDetails[i].SalesExchangeRate)
                                                        @Html.HiddenFor(item => @Model.CostUpdationDetails[i].SalesHome)
                                                        @Html.HiddenFor(item => @Model.CostUpdationDetails[i].SalesForeign)
                                                        @Html.HiddenFor(item => @Model.CostUpdationDetails[i].Cost)
                                                        @Html.HiddenFor(item => @Model.CostUpdationDetails[i].SupplierID)
                                                        @Html.HiddenFor(item => @Model.CostUpdationDetails[i].JInvoiceID)
                                                        @Html.HiddenFor(item => @Model.CostUpdationDetails[i].CostUpdationID)
                                                        @Html.HiddenFor(item => @Model.CostUpdationDetails[i].CostUpdationDetailID)
                                                        @Html.HiddenFor(item => @Model.CostUpdationDetails[i].SalesCurrencyID)
                                                    </td>
                                                    <td style="text-align: right;">

                                                        @Html.DisplayFor(item => @Model.CostUpdationDetails[i].AmountPaidTillDate)
                                                        @Html.HiddenFor(item => @Model.CostUpdationDetails[i].AmountPaidTillDate, new { @class = "AmountPaidTillDate" })

                                                    </td>
                                                    <td class="fullwidthtd">

                                                        @Html.TextBoxFor(item => @Model.CostUpdationDetails[i].InvoiceAmount, new { @class = "amt txtNum textright LoadedInvoiceAmount", autocomplete = "off" })

                                                    </td>
                                                    <td class="fullwidthtd">

                                                        @Html.TextBoxFor(item => @Model.CostUpdationDetails[i].supplierReference, new { autocomplete = "off", @class = "supplierReference" })

                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </table>

                                </div>

                            </div>
                        </div>


                        <div class="row no-margin buttons spacer9">
                            <div class="col-xs-12 align-right" style="text-align:right;padding:20px">
                                <input type="submit" class="btn btn-primary btnwid" value="Save" name="Command" />
                                <a href='@Url.Action("CostUpdationDetails", "CostUpdation", new { id = 0 })' class="btn btn-danger btnwid">Cancel</a>
                            </div>
                        </div>
                    </div>
                </section>
            }
        </div>
    </div>
    <div>
    </div>

    <script type="text/javascript">
            // When the document is ready
            $(document).ready(function () {

                var startdate = '@Session["FyearFrom"].ToString()';
                var enddate = '@Session["FyearTo"].ToString()';
                var sd = new Date(startdate);
                var ed = new Date(enddate);

                $(function () {
                    $("#InvoiceDate").datepicker({
                        dateFormat: 'dd-M-yy',
                        changeYear: true, changeMonth: true,
                        minDate: sd,
                        maxDate: ed,
                    });
                    $("#TransactionDate").datepicker({
                        dateFormat: 'dd-M-yy',
                        changeYear: true, changeMonth: true,
                        minDate: sd,
                        maxDate: ed,
                    });
                    $("#TransactionDate").datepicker( "setDate", new Date() );
                });


                //$('#InvoiceDate').datepicker({
                //    format: "dd-mm-yyyy",
                //    maxDate: '0',
                //    changeYear: true,
                //    changeMonth: true,
                //});
            });
    </script>
